!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ObservableArray=function(e){var t=this,n=[],r={itemadded:[],itemremoved:[],itemset:[]};function i(e){e in t||Object.defineProperty(t,e,{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(t){n[e]=t,o({type:"itemset",index:e,item:t})}})}function o(e){r[e.type].forEach(function(n){n.call(t,e)})}t.on=function(e,t){r[e].push(t)},t.off=function(e,t){for(var n=r[e],i=n.length;--i>=0;)n[i]===t&&n.splice(i,1)},t.push=function(){for(var e,t=0,r=arguments.length;t<r;t++)e=n.length,n.push(arguments[t]),i(e),o({type:"itemadded",index:e,item:arguments[t]});return n.length},t.pop=function(){if(n.length>-1){var e=n.length-1,r=n.pop();return delete t[e],o({type:"itemremoved",index:e,item:r}),r}},t.unshift=function(){for(var e=0,t=arguments.length;e<t;e++)n.splice(e,0,arguments[e]),i(n.length-1),o({type:"itemadded",index:e,item:arguments[e]});for(;e<n.length;e++)o({type:"itemset",index:e,item:n[e]});return n.length},t.shift=function(){if(n.length>-1){var e=n.shift();return delete t[n.length],o({type:"itemremoved",index:0,item:e}),e}},t.splice=function(e,r){var s,u=[];for(e=null==e?0:e<0?n.length+e:e,r=null==r?n.length-e:r>0?r:0;r--;)s=n.splice(e,1)[0],u.push(s),delete t[n.length],o({type:"itemremoved",index:e+u.length-1,item:s});for(var l=2,c=arguments.length;l<c;l++)n.splice(e,0,arguments[l]),i(n.length-1),o({type:"itemadded",index:e,item:arguments[l]}),e++;return u},Object.defineProperty(t,"length",{configurable:!1,enumerable:!1,get:function(){return n.length},set:function(e){var r=Number(e),i=n.length;if(!(r%1==0&&r>=0))throw new RangeError("Invalid array length");return r<i?t.splice(r):r>i&&t.push.apply(t,new Array(r-i)),n.length=r,e}}),Object.defineProperty(t,"innerArray",{configurable:!1,enumerable:!1,get:function(){return n},set:function(e){n=e}}),Object.getOwnPropertyNames(Array.prototype).forEach(function(e){e in t||Object.defineProperty(t,e,{configurable:!1,enumerable:!1,writable:!1,value:Array.prototype[e]})}),t.toJSON=(()=>n),e instanceof Array&&t.push.apply(t,e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.value=((e,t)=>{const n=e=>{Array.isArray(e)?n.$val.innerArray=e:n.$val=e;const t=n.computes;if(t.length)for(var r=0;r<t.length;r++)!t[r].freezed&&t[r](t[r].compute())};return n.$val=e,n.freezed=t,n.computes=[],e instanceof Function&&(n.compute=e),n.toJSON=(()=>n.$val),n}),t.array=(e=>{const n=t.value(new r.ObservableArray(e));return n.on=n.$val.on,n.off=n.$val.off,n.toJSON=(()=>n.$val.innerArray),n}),t.on=((e,t,n)=>{e.$val.on(t,n)}),t.off=((e,t,n)=>{e.$val.off(t,n)}),t.compute=((e,...n)=>{for(var r=t.value(e),i=0;i<n.length;i++)n[i].computes.push(r);e()}),t.initCompute=((e,...n)=>{var r=t.value(e()),i=function(){r(e())};i.compute=r;for(var o=0;o<n.length;o++)n[o].computes.push(i);return r}),t.setCompute=((e,n,...r)=>(t.destroy(e),t.initCompute(n,...r))),t.destroy=(e=>{delete e.compute,delete e.computes})},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(1)),r(n(10)),r(n(9)),r(n(8)),r(n(7))},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t),function(e,r){var i,o=n(3);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var s=Object(o.a)(i);t.default=s}.call(this,n(5),n(4)(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2),i=n(6);class o{constructor(e){this.isUnsubscribed=!1,this.handlers=null,this._unsubscribe=null,this.handlers=e,this.isUnsubscribed=!1}next(e){this.handlers.next&&!this.isUnsubscribed&&this.handlers.next(e)}error(e){this.isUnsubscribed||(this.handlers.error&&this.handlers.error(e),this.unsubscribe())}complete(){this.isUnsubscribed||(this.handlers.complete&&this.handlers.complete(),this.unsubscribe())}unsubscribe(){this.isUnsubscribed=!0,this._unsubscribe&&this._unsubscribe()}}t.toObservable=(e=>new class{constructor(e){this._subscribe=null,this._subscribe=e}subscribe(e){const t=new o(e);return t._unsubscribe=this._subscribe(t),{unsubscribe(){t.unsubscribe()}}}[i.default](){return this}}(t=>{var n=r.value(()=>{t.next(e.$val)});e.computes.push(n)}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r={};t.startContext=((e,t)=>{r[e]||(r[e]=[]),r[e].push(t)}),t.getContextValue=(e=>{if(r[e])return r[e][r[e].length-1]}),t.endContext=(e=>{r[e].pop()}),t.Context=(e=>null)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=/^on[A-Z]/;t.Fragment=Symbol("fjsx.Fragment");const i=(e,t,n)=>{let i=null;for(var o in t)if((i=t[o])instanceof Function)r.test(o)?e[o=o.toLowerCase()]=i:i(e);else if(i instanceof Object)for(var s in i)"function"==typeof i[s]&&i[s](e);else n||-1!==o.indexOf("-")?e.setAttribute(o,i):e[o]=i};t.createElement=((e,n,...r)=>{let o=null;return e instanceof Function?(null===n&&(n={}),n.children=r,(o=e(n))&&(o.$props=n)):(e===t.Fragment?o=document.createDocumentFragment():(o=document.createElement(e),n&&i(o,n,!1)),o.$props=n,r&&r.length&&t.addChildElements(o,r)),o}),t.createSvgElement=((e,n,...r)=>{let o=document.createElementNS("http://www.w3.org/2000/svg",e);return n&&i(o,n,!0),r&&r.length&&t.addChildElements(o,r),o}),t.addChildElements=((e,n)=>{let r=null;for(var i=0;i<n.length;i++)Array.isArray(n[i])?t.addChildElements(e,n[i]):n[i]instanceof Function?n[i](e):n[i]&&(r=n[i].$props,e.appendChild(n[i]instanceof Node?n[i]:document.createTextNode(n[i])),r&&r.didMount&&r.didMount(e,n[i]))}),t.createTextNode=(e=>e.appendChild(document.createTextNode("")))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),i=n(1);t.conditionalElement=((e,t,n)=>(n instanceof Node==!1&&(n=document.createTextNode(n||"")),t?e.replaceChild(n,t):e.appendChild(n),n)),t.insertToDom=((e,t,n)=>{n instanceof Function?n(e):(n instanceof Node==!1&&(n=document.createTextNode(n)),e.insertBefore(n,e.childNodes[t]))}),t.arrayMap=((e,n,o)=>{const s=e.$val instanceof r.ObservableArray?e.$val:new r.ObservableArray(e.$val);s.on("itemadded",function(e){t.insertToDom(n,e.index,o(e.item,e.index))}),s.on("itemset",function(e){n.replaceChild(o(e.item,e.index),n.childNodes.item(e.index))}),s.on("itemremoved",function(e){n.removeChild(n.childNodes.item(e.index))}),e(s);i.compute(()=>{if(0===e.$val.length)n.textContent="";else{n.textContent="";for(var r=n.childElementCount;r<e.$val.length;r++)t.insertToDom(n,r,o(e.$val[r],r))}},e)})}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbGliL29ic2VydmFibGUtYXJyYXkudHMiLCJ3ZWJwYWNrOi8vLy4vbGliL2YudHMiLCJ3ZWJwYWNrOi8vLy4vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9saWIvb2JzZXJ2YWJsZS50cyIsIndlYnBhY2s6Ly8vLi9saWIvY29udGV4dC50cyIsIndlYnBhY2s6Ly8vLi9saWIvZG9tLXRyZWUudHMiLCJ3ZWJwYWNrOi8vLy4vbGliL2RvbS50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiT2JzZXJ2YWJsZUFycmF5IiwiaXRlbXMiLCJfc2VsZiIsInRoaXMiLCJfYXJyYXkiLCJfaGFuZGxlcnMiLCJpdGVtYWRkZWQiLCJpdGVtcmVtb3ZlZCIsIml0ZW1zZXQiLCJkZWZpbmVJbmRleFByb3BlcnR5IiwiaW5kZXgiLCJzZXQiLCJ2IiwicmFpc2VFdmVudCIsInR5cGUiLCJpdGVtIiwiZXZlbnQiLCJmb3JFYWNoIiwiaCIsIm9uIiwiZXZlbnROYW1lIiwiaGFuZGxlciIsInB1c2giLCJvZmYiLCJsbiIsImxlbmd0aCIsInNwbGljZSIsImFyZ3VtZW50cyIsInBvcCIsInVuc2hpZnQiLCJzaGlmdCIsImhvd01hbnkiLCJyZW1vdmVkIiwiTnVtYmVyIiwiUmFuZ2VFcnJvciIsImFwcGx5IiwiQXJyYXkiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwid3JpdGFibGUiLCJ0b0pTT04iLCJvYnNlcnZhYmxlX2FycmF5XzEiLCJmcmVlemVkIiwiaW5uZXJGbiIsInZhbCIsImlzQXJyYXkiLCJpbm5lckFycmF5IiwiY29tcHV0ZXMiLCJjb21wdXRlIiwiRnVuY3Rpb24iLCJhcnJheSIsImFyciIsIiR2YWwiLCJjYWxsYmFjayIsImZuIiwiYXJncyIsImluaXRDb21wdXRlIiwiY1ZhbHVlIiwiY21wSW5uZXIiLCJzZXRDb21wdXRlIiwicHJldiIsImRlc3Ryb3kiLCJfX2V4cG9ydCIsInN5bWJvbE9ic2VydmFibGVQb255ZmlsbCIsInJvb3QiLCJyZXN1bHQiLCJTeW1ib2wiLCJvYnNlcnZhYmxlIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJjcmVhdGUiLCJjaGlsZHJlbiIsImciLCJldmFsIiwiZSIsIndpbmRvdyIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwic2VsZiIsImdsb2JhbCIsIl9fd2VicGFja19leHBvcnRzX18iLCJfXzEiLCJzeW1ib2xfb2JzZXJ2YWJsZV8xIiwiT2JzZXJ2ZXIiLCJbb2JqZWN0IE9iamVjdF0iLCJoYW5kbGVycyIsImlzVW5zdWJzY3JpYmVkIiwiX3Vuc3Vic2NyaWJlIiwibmV4dCIsImVycm9yIiwidW5zdWJzY3JpYmUiLCJjb21wbGV0ZSIsInRvT2JzZXJ2YWJsZSIsImRhdGEiLCJzdWJzY3JpYmUiLCJfc3Vic2NyaWJlIiwib2JzIiwib2JzZXJ2ZXIiLCJkZWZhdWx0IiwiYXBwQ29udGV4dCIsInN0YXJ0Q29udGV4dCIsImtleSIsImdldENvbnRleHRWYWx1ZSIsImVuZENvbnRleHQiLCJDb250ZXh0IiwicHJvcHMiLCJqc3hFdmVudFByb3BlcnR5IiwiRnJhZ21lbnQiLCJzZXRFbGVtZW50QXR0cmlidXRlcyIsImVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwiZm9yY2VTZXRBdHRyIiwiYXR0cmlidXRlIiwiYXR0cmlidXRlTmFtZSIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsImluZGV4T2YiLCJzZXRBdHRyaWJ1dGUiLCJjcmVhdGVFbGVtZW50IiwidGFnTmFtZSIsImNoaWxkcyIsImRvY3VtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImFkZENoaWxkRWxlbWVudHMiLCJjcmVhdGVTdmdFbGVtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiYXBwZW5kQ2hpbGQiLCJOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJkaWRNb3VudCIsInBhcmVudCIsImZfMSIsImNvbmRpdGlvbmFsRWxlbWVudCIsInBhcmVudEVsZW1lbnQiLCJvbGRFbGVtZW50IiwibmV3RWxlbWVudCIsInJlcGxhY2VDaGlsZCIsImluc2VydFRvRG9tIiwiaXRlbUVsZW1lbnQiLCJpbnNlcnRCZWZvcmUiLCJjaGlsZE5vZGVzIiwiYXJyYXlNYXAiLCJwYXJlbnREb20iLCJyZW5kZXJSZXR1cm4iLCJvQXJyIiwicmVtb3ZlQ2hpbGQiLCJ0ZXh0Q29udGVudCIsImNoaWxkRWxlbWVudENvdW50Il0sIm1hcHBpbmdzIjoiNkRBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQTJDQSxPQXRDQUYsRUFB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L0QsVUFJaENvSSxFQUFLM0gsR0FBRyxjQUFlLFNBQVNzRCxHQUM5Qm1FLEVBQVVHLFlBQVlILEVBQVVGLFdBQVczSCxLQUFLMEQsRUFBRS9ELFVBRXBEd0MsRUFBSTRGLEdBVUpiLEVBQUFsRixRQVJrQixLQUNoQixHQUF3QixJQUFwQkcsRUFBSUMsS0FBSzFCLE9BQWNtSCxFQUFVSSxZQUFjLE9BQzlDLENBQ0hKLEVBQVVJLFlBQWMsR0FDeEIsSUFBSyxJQUFJekssRUFBSXFLLEVBQVVLLGtCQUFtQjFLLEVBQUkyRSxFQUFJQyxLQUFLMUIsT0FBUWxELElBQzdERixFQUFBa0ssWUFBWUssRUFBV3JLLEVBQUdzSyxFQUFhM0YsRUFBSUMsS0FBSzVFLEdBQUlBLE1BR3ZDMkUiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIpO1xuIiwiLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTEwMDM3Ni9ob3ctdG8td2F0Y2gtZm9yLWFycmF5LWNoYW5nZXNcbmV4cG9ydCBmdW5jdGlvbiBPYnNlcnZhYmxlQXJyYXkoaXRlbXMpIHtcbiAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICBfYXJyYXkgPSBbXSxcbiAgICBfaGFuZGxlcnMgPSB7XG4gICAgICBpdGVtYWRkZWQ6IFtdLFxuICAgICAgaXRlbXJlbW92ZWQ6IFtdLFxuICAgICAgaXRlbXNldDogW11cbiAgICB9O1xuXG4gIGZ1bmN0aW9uIGRlZmluZUluZGV4UHJvcGVydHkoaW5kZXgpIHtcbiAgICBpZiAoIShpbmRleCBpbiBfc2VsZikpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfc2VsZiwgaW5kZXgsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfYXJyYXlbaW5kZXhdO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICBfYXJyYXlbaW5kZXhdID0gdjtcbiAgICAgICAgICByYWlzZUV2ZW50KHtcbiAgICAgICAgICAgIHR5cGU6IFwiaXRlbXNldFwiLFxuICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgICAgaXRlbTogdlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByYWlzZUV2ZW50KGV2ZW50KSB7XG4gICAgX2hhbmRsZXJzW2V2ZW50LnR5cGVdLmZvckVhY2goZnVuY3Rpb24oaCkge1xuICAgICAgaC5jYWxsKF9zZWxmLCBldmVudCk7XG4gICAgfSk7XG4gIH1cblxuICBfc2VsZi5vbiA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgIF9oYW5kbGVyc1tldmVudE5hbWVdLnB1c2goaGFuZGxlcik7XG4gIH07XG5cbiAgX3NlbGYub2ZmID0gZnVuY3Rpb24oZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgdmFyIGggPSBfaGFuZGxlcnNbZXZlbnROYW1lXTtcbiAgICB2YXIgbG4gPSBoLmxlbmd0aDtcbiAgICB3aGlsZSAoLS1sbiA+PSAwKSB7XG4gICAgICBpZiAoaFtsbl0gPT09IGhhbmRsZXIpIHtcbiAgICAgICAgaC5zcGxpY2UobG4sIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfc2VsZi5wdXNoID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluZGV4O1xuICAgIGZvciAodmFyIGkgPSAwLCBsbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsbjsgaSsrKSB7XG4gICAgICBpbmRleCA9IF9hcnJheS5sZW5ndGg7XG4gICAgICBfYXJyYXkucHVzaChhcmd1bWVudHNbaV0pO1xuICAgICAgZGVmaW5lSW5kZXhQcm9wZXJ0eShpbmRleCk7XG4gICAgICByYWlzZUV2ZW50KHtcbiAgICAgICAgdHlwZTogXCJpdGVtYWRkZWRcIixcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICBpdGVtOiBhcmd1bWVudHNbaV1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gX2FycmF5Lmxlbmd0aDtcbiAgfTtcblxuICBfc2VsZi5wb3AgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoX2FycmF5Lmxlbmd0aCA+IC0xKSB7XG4gICAgICB2YXIgaW5kZXggPSBfYXJyYXkubGVuZ3RoIC0gMSxcbiAgICAgICAgaXRlbSA9IF9hcnJheS5wb3AoKTtcbiAgICAgIGRlbGV0ZSBfc2VsZltpbmRleF07XG4gICAgICByYWlzZUV2ZW50KHtcbiAgICAgICAgdHlwZTogXCJpdGVtcmVtb3ZlZFwiLFxuICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgIGl0ZW06IGl0ZW1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICB9O1xuXG4gIF9zZWxmLnVuc2hpZnQgPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbG47IGkrKykge1xuICAgICAgX2FycmF5LnNwbGljZShpLCAwLCBhcmd1bWVudHNbaV0pO1xuICAgICAgZGVmaW5lSW5kZXhQcm9wZXJ0eShfYXJyYXkubGVuZ3RoIC0gMSk7XG4gICAgICByYWlzZUV2ZW50KHtcbiAgICAgICAgdHlwZTogXCJpdGVtYWRkZWRcIixcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIGl0ZW06IGFyZ3VtZW50c1tpXVxuICAgICAgfSk7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgX2FycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICByYWlzZUV2ZW50KHtcbiAgICAgICAgdHlwZTogXCJpdGVtc2V0XCIsXG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgICBpdGVtOiBfYXJyYXlbaV1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gX2FycmF5Lmxlbmd0aDtcbiAgfTtcblxuICBfc2VsZi5zaGlmdCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChfYXJyYXkubGVuZ3RoID4gLTEpIHtcbiAgICAgIHZhciBpdGVtID0gX2FycmF5LnNoaWZ0KCk7XG4gICAgICBkZWxldGUgX3NlbGZbX2FycmF5Lmxlbmd0aF07XG4gICAgICByYWlzZUV2ZW50KHtcbiAgICAgICAgdHlwZTogXCJpdGVtcmVtb3ZlZFwiLFxuICAgICAgICBpbmRleDogMCxcbiAgICAgICAgaXRlbTogaXRlbVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG4gIH07XG5cbiAgX3NlbGYuc3BsaWNlID0gZnVuY3Rpb24oaW5kZXgsIGhvd01hbnkgLyosIGVsZW1lbnQxLCBlbGVtZW50MiwgLi4uICovKSB7XG4gICAgdmFyIHJlbW92ZWQgPSBbXSxcbiAgICAgIGl0ZW0sXG4gICAgICBwb3M7XG5cbiAgICBpbmRleCA9IGluZGV4ID09IG51bGwgPyAwIDogaW5kZXggPCAwID8gX2FycmF5Lmxlbmd0aCArIGluZGV4IDogaW5kZXg7XG5cbiAgICBob3dNYW55ID1cbiAgICAgIGhvd01hbnkgPT0gbnVsbCA/IF9hcnJheS5sZW5ndGggLSBpbmRleCA6IGhvd01hbnkgPiAwID8gaG93TWFueSA6IDA7XG5cbiAgICB3aGlsZSAoaG93TWFueS0tKSB7XG4gICAgICBpdGVtID0gX2FycmF5LnNwbGljZShpbmRleCwgMSlbMF07XG4gICAgICByZW1vdmVkLnB1c2goaXRlbSk7XG4gICAgICBkZWxldGUgX3NlbGZbX2FycmF5Lmxlbmd0aF07XG4gICAgICByYWlzZUV2ZW50KHtcbiAgICAgICAgdHlwZTogXCJpdGVtcmVtb3ZlZFwiLFxuICAgICAgICBpbmRleDogaW5kZXggKyByZW1vdmVkLmxlbmd0aCAtIDEsXG4gICAgICAgIGl0ZW06IGl0ZW1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAyLCBsbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsbjsgaSsrKSB7XG4gICAgICBfYXJyYXkuc3BsaWNlKGluZGV4LCAwLCBhcmd1bWVudHNbaV0pO1xuICAgICAgZGVmaW5lSW5kZXhQcm9wZXJ0eShfYXJyYXkubGVuZ3RoIC0gMSk7XG4gICAgICByYWlzZUV2ZW50KHtcbiAgICAgICAgdHlwZTogXCJpdGVtYWRkZWRcIixcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICBpdGVtOiBhcmd1bWVudHNbaV1cbiAgICAgIH0pO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICByZXR1cm4gcmVtb3ZlZDtcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3NlbGYsIFwibGVuZ3RoXCIsIHtcbiAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gX2FycmF5Lmxlbmd0aDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBuID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgIHZhciBsZW5ndGggPSBfYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKG4gJSAxID09PSAwICYmIG4gPj0gMCkge1xuICAgICAgICBpZiAobiA8IGxlbmd0aCkge1xuICAgICAgICAgIF9zZWxmLnNwbGljZShuKTtcbiAgICAgICAgfSBlbHNlIGlmIChuID4gbGVuZ3RoKSB7XG4gICAgICAgICAgX3NlbGYucHVzaC5hcHBseShfc2VsZiwgbmV3IEFycmF5KG4gLSBsZW5ndGgpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIGFycmF5IGxlbmd0aFwiKTtcbiAgICAgIH1cbiAgICAgIF9hcnJheS5sZW5ndGggPSBuO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9zZWxmLCBcImlubmVyQXJyYXlcIiwge1xuICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfYXJyYXk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIC8vIF9zZWxmLnB1c2guYXBwbHkoX3NlbGYsIHYpOyAvLyByZW5kZXJBbGxcbiAgICAgIF9hcnJheSA9IHY7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhBcnJheS5wcm90b3R5cGUpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgIGlmICghKG5hbWUgaW4gX3NlbGYpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3NlbGYsIG5hbWUsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IEFycmF5LnByb3RvdHlwZVtuYW1lXVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICBfc2VsZi50b0pTT04gPSAoKSA9PiB7XG4gICAgcmV0dXJuIF9hcnJheTtcbiAgfTtcblxuICBpZiAoaXRlbXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIF9zZWxmLnB1c2guYXBwbHkoX3NlbGYsIGl0ZW1zKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZUFycmF5IH0gZnJvbSBcIi4vb2JzZXJ2YWJsZS1hcnJheVwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGSnN4VmFsdWU8VD4ge1xyXG4gICh2YWw6IFQpOiB2b2lkO1xyXG4gIHJlYWRvbmx5ICR2YWw6IFQ7XHJcbiAgZnJlZXplZDogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgRmpzeEFycmF5RXZlbnRUeXBlID0gXCJpdGVtYWRkZWRcIiB8IFwiaXRlbXNldFwiIHwgXCJpdGVtcmVtb3ZlZFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHZhbHVlID0gPFQ+KHZhbHVlOiBULCBmcmVlemVkPzogYm9vbGVhbik6IEZKc3hWYWx1ZTxUPiA9PiB7XHJcbiAgY29uc3QgaW5uZXJGbjogYW55ID0gKHZhbD8pID0+IHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcclxuICAgICAgLy8gVE9ETyBodHRwczovL2dpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi9tYWppbmJ1dVxyXG4gICAgICBpbm5lckZuW1wiJHZhbFwiXS5pbm5lckFycmF5ID0gdmFsO1xyXG4gICAgfSBlbHNlIGlubmVyRm5bXCIkdmFsXCJdID0gdmFsO1xyXG4gICAgY29uc3QgY29tcHV0ZXMgPSBpbm5lckZuW1wiY29tcHV0ZXNcIl07XHJcbiAgICBpZiAoY29tcHV0ZXMubGVuZ3RoKVxyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXB1dGVzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICFjb21wdXRlc1tpXVtcImZyZWV6ZWRcIl0gJiYgY29tcHV0ZXNbaV0oY29tcHV0ZXNbaV0uY29tcHV0ZSgpKTtcclxuICB9O1xyXG4gIGlubmVyRm5bXCIkdmFsXCJdID0gdmFsdWU7XHJcbiAgaW5uZXJGbltcImZyZWV6ZWRcIl0gPSBmcmVlemVkO1xyXG5cclxuICBpbm5lckZuW1wiY29tcHV0ZXNcIl0gPSBbXTtcclxuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBGdW5jdGlvbikgaW5uZXJGbltcImNvbXB1dGVcIl0gPSB2YWx1ZTtcclxuICBpbm5lckZuLnRvSlNPTiA9ICgpID0+IGlubmVyRm5bXCIkdmFsXCJdO1xyXG4gIHJldHVybiBpbm5lckZuO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGFycmF5ID0gPFQ+KFxyXG4gIGl0ZW1zOiBUW11cclxuKToge1xyXG4gIG9uPzogKFxyXG4gICAgdHlwZTogRmpzeEFycmF5RXZlbnRUeXBlLFxyXG4gICAgY2FsbGJhY2s6IChlOiB7IGl0ZW06IFQ7IGluZGV4OiBudW1iZXIgfSkgPT4gdm9pZFxyXG4gICkgPT4gdm9pZDtcclxuICByZW1vdmVFdmVudExpc3RlbmVyPzogKHR5cGU6IEZqc3hBcnJheUV2ZW50VHlwZSkgPT4gdm9pZDtcclxuICAkdmFsOiBUW107XHJcbn0gPT4ge1xyXG4gIGNvbnN0IGFyciA9IHZhbHVlKG5ldyBPYnNlcnZhYmxlQXJyYXkoaXRlbXMpKSBhcyBhbnk7XHJcbiAgYXJyLm9uID0gYXJyLiR2YWwub247XHJcbiAgYXJyLm9mZiA9IGFyci4kdmFsLm9mZjtcclxuICBhcnIudG9KU09OID0gKCkgPT4gYXJyLiR2YWwuaW5uZXJBcnJheTtcclxuXHJcbiAgcmV0dXJuIGFycjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBvbiA9IChcclxuICBhcnI6IGFueVtdLFxyXG4gIHR5cGU6IEZqc3hBcnJheUV2ZW50VHlwZSxcclxuICBjYWxsYmFjazogKGU6IHsgaXRlbTogYW55OyBpbmRleDogbnVtYmVyIH0pID0+IHZvaWRcclxuKSA9PiB7XHJcbiAgYXJyW1wiJHZhbFwiXS5vbih0eXBlLCBjYWxsYmFjayk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgb2ZmID0gKFxyXG4gIGFycjogYW55W10sXHJcbiAgdHlwZTogRmpzeEFycmF5RXZlbnRUeXBlLFxyXG4gIGNhbGxiYWNrOiAoZTogeyBpdGVtOiBhbnk7IGluZGV4OiBudW1iZXIgfSkgPT4gdm9pZFxyXG4pID0+IHtcclxuICBhcnJbXCIkdmFsXCJdLm9mZih0eXBlLCBjYWxsYmFjayk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY29tcHV0ZSA9IChmbjogKCkgPT4gdm9pZCwgLi4uYXJnczogYW55W10pID0+IHtcclxuICB2YXIgY29tcHV0ZSA9IHZhbHVlKGZuKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIGFyZ3NbaV1bXCJjb21wdXRlc1wiXS5wdXNoKGNvbXB1dGUpO1xyXG4gIGZuKCk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgaW5pdENvbXB1dGUgPSAoZm46ICgpID0+IGFueSwgLi4uYXJnczogYW55W10pID0+IHtcclxuICB2YXIgY1ZhbHVlID0gdmFsdWUoZm4oKSk7XHJcbiAgdmFyIGNtcElubmVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICBjVmFsdWUoZm4oKSk7XHJcbiAgfTtcclxuICBjbXBJbm5lcltcImNvbXB1dGVcIl0gPSBjVmFsdWU7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSBhcmdzW2ldW1wiY29tcHV0ZXNcIl0ucHVzaChjbXBJbm5lcik7XHJcblxyXG4gIHJldHVybiBjVmFsdWU7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgc2V0Q29tcHV0ZSA9IChwcmV2OiBhbnksIGZuOiAoKSA9PiB2b2lkLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xyXG4gIGRlc3Ryb3kocHJldik7XHJcbiAgcmV0dXJuIGluaXRDb21wdXRlKGZuLCAuLi5hcmdzKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBkZXN0cm95ID0gKGl0ZW06IGFueSkgPT4ge1xyXG4gIGRlbGV0ZSBpdGVtW1wiY29tcHV0ZVwiXTtcclxuICBkZWxldGUgaXRlbVtcImNvbXB1dGVzXCJdO1xyXG59O1xyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiSlNYLmQudHNcIiAvPlxuXG5leHBvcnQgKiBmcm9tIFwiLi9saWIvZlwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbGliL2RvbVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbGliL2RvbS10cmVlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9saWIvY29udGV4dFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbGliL29ic2VydmFibGVcIjtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XHJcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcclxuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxyXG5cdFx0fSk7XHJcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcclxuXHR9XHJcblx0cmV0dXJuIG1vZHVsZTtcclxufTtcclxuIiwidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaCAoZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsImltcG9ydCB7IEZKc3hWYWx1ZSwgdmFsdWUgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCAkJHN5bWJvbE9ic2VydmFibGUgZnJvbSBcInN5bWJvbC1vYnNlcnZhYmxlXCI7XG5cbi8vIGh0dHBzOi8vbWVkaXVtLmNvbS9AZmtudXNzZWwvYS1zaW1wbGUtb2JzZXJ2YWJsZS1pbXBsZW1lbnRhdGlvbi1jOWM4MDljODljNjlcblxuY2xhc3MgT2JzZXJ2ZXIge1xuICBpc1Vuc3Vic2NyaWJlZCA9IGZhbHNlO1xuICBoYW5kbGVyczogUGFydGlhbDxPYnNlcnZlcj4gPSBudWxsO1xuICBfdW5zdWJzY3JpYmUgPSBudWxsO1xuICBjb25zdHJ1Y3RvcihoYW5kbGVyczogUGFydGlhbDxPYnNlcnZlcj4pIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gaGFuZGxlcnM7IC8vIG5leHQsIGVycm9yIGFuZCBjb21wbGV0ZSBsb2dpY1xuICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgfVxuXG4gIG5leHQodmFsdWUpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVycy5uZXh0ICYmICF0aGlzLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzLm5leHQodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGVycm9yKGVycm9yKSB7XG4gICAgaWYgKCF0aGlzLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICBpZiAodGhpcy5oYW5kbGVycy5lcnJvcikge1xuICAgICAgICB0aGlzLmhhbmRsZXJzLmVycm9yKGVycm9yKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBsZXRlKCkge1xuICAgIGlmICghdGhpcy5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgaWYgKHRoaXMuaGFuZGxlcnMuY29tcGxldGUpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVycy5jb21wbGV0ZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG5cbiAgdW5zdWJzY3JpYmUoKSB7XG4gICAgdGhpcy5pc1Vuc3Vic2NyaWJlZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fdW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG59XG5cbmNsYXNzIE9ic2VydmFibGUge1xuICBfc3Vic2NyaWJlOiAob2JzZXJ2ZXI6IE9ic2VydmVyKSA9PiAoKSA9PiB2b2lkID0gbnVsbDtcbiAgY29uc3RydWN0b3Ioc3Vic2NyaWJlKSB7XG4gICAgdGhpcy5fc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICB9XG5cbiAgc3Vic2NyaWJlKG9iczogUGFydGlhbDxPYnNlcnZlcj4pIHtcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBPYnNlcnZlcihvYnMpO1xuXG4gICAgb2JzZXJ2ZXIuX3Vuc3Vic2NyaWJlID0gdGhpcy5fc3Vic2NyaWJlKG9ic2VydmVyKTtcblxuICAgIHJldHVybiB7XG4gICAgICB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgb2JzZXJ2ZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgWyQkc3ltYm9sT2JzZXJ2YWJsZV0oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHRvT2JzZXJ2YWJsZSA9IDxUPihkYXRhOiBGSnN4VmFsdWU8YW55Pik6IFQgPT4ge1xuICByZXR1cm4gbmV3IE9ic2VydmFibGUob2JzZXJ2ZXIgPT4ge1xuICAgIHZhciBjb21wdXRlID0gdmFsdWUoKCkgPT4ge1xuICAgICAgb2JzZXJ2ZXIubmV4dChkYXRhLiR2YWwpO1xuICAgIH0pO1xuICAgIGRhdGFbXCJjb21wdXRlc1wiXS5wdXNoKGNvbXB1dGUpO1xuICB9KSBhcyBhbnk7XG59O1xuIiwiY29uc3QgYXBwQ29udGV4dDogeyBba2V5OiBzdHJpbmddOiBhbnlbXSB9ID0ge307XG5cbmV4cG9ydCBjb25zdCBzdGFydENvbnRleHQgPSAoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgaWYgKCFhcHBDb250ZXh0W2tleV0pIGFwcENvbnRleHRba2V5XSA9IFtdO1xuICBhcHBDb250ZXh0W2tleV0ucHVzaCh2YWx1ZSk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q29udGV4dFZhbHVlID0gKGtleTogc3RyaW5nKSA9PiB7XG4gIGlmIChhcHBDb250ZXh0W2tleV0pIHJldHVybiBhcHBDb250ZXh0W2tleV1bYXBwQ29udGV4dFtrZXldLmxlbmd0aCAtIDFdO1xufTtcblxuZXhwb3J0IGNvbnN0IGVuZENvbnRleHQgPSAoa2V5OiBzdHJpbmcpID0+IHtcbiAgYXBwQ29udGV4dFtrZXldLnBvcCgpO1xufTtcblxuZXhwb3J0IGNvbnN0IENvbnRleHQgPSAocHJvcHM6IHsga2V5OiBzdHJpbmc7IHZhbHVlOiBhbnkgfSkgPT4gbnVsbDtcbiIsInZhciBqc3hFdmVudFByb3BlcnR5ID0gL15vbltBLVpdLztcclxuY29uc3Qgc3ZnTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7XHJcbmV4cG9ydCBjb25zdCBGcmFnbWVudCA9IFN5bWJvbChcImZqc3guRnJhZ21lbnRcIik7XHJcblxyXG5jb25zdCBzZXRFbGVtZW50QXR0cmlidXRlcyA9IChcclxuICBlbGVtZW50OiBFbGVtZW50LFxyXG4gIGF0dHJpYnV0ZXMsXHJcbiAgZm9yY2VTZXRBdHRyOiBib29sZWFuXHJcbikgPT4ge1xyXG4gIGxldCBhdHRyaWJ1dGUgPSBudWxsO1xyXG4gIGZvciAodmFyIGF0dHJpYnV0ZU5hbWUgaW4gYXR0cmlidXRlcykge1xyXG4gICAgYXR0cmlidXRlID0gYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXTtcclxuICAgIGlmIChhdHRyaWJ1dGUgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xyXG4gICAgICBpZiAoanN4RXZlbnRQcm9wZXJ0eS50ZXN0KGF0dHJpYnV0ZU5hbWUpKSB7XHJcbiAgICAgICAgYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBlbGVtZW50W2F0dHJpYnV0ZU5hbWVdID0gYXR0cmlidXRlO1xyXG4gICAgICB9IGVsc2UgYXR0cmlidXRlKGVsZW1lbnQpO1xyXG4gICAgfSBlbHNlIGlmIChhdHRyaWJ1dGUgaW5zdGFuY2VvZiBPYmplY3QpIHtcclxuICAgICAgLy9zdHlsZVxyXG4gICAgICBmb3IgKHZhciBrZXkgaW4gYXR0cmlidXRlKVxyXG4gICAgICAgIGlmICh0eXBlb2YgYXR0cmlidXRlW2tleV0gPT09IFwiZnVuY3Rpb25cIikgYXR0cmlidXRlW2tleV0oZWxlbWVudCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoZm9yY2VTZXRBdHRyIHx8IGF0dHJpYnV0ZU5hbWUuaW5kZXhPZihcIi1cIikgIT09IC0xKVxyXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZSk7XHJcbiAgICAgIGVsc2UgZWxlbWVudFthdHRyaWJ1dGVOYW1lXSA9IGF0dHJpYnV0ZTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlRWxlbWVudCA9IChcclxuICB0YWdOYW1lOiBzdHJpbmcgfCBGdW5jdGlvbiB8IFN5bWJvbCxcclxuICBhdHRyaWJ1dGVzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9LFxyXG4gIC4uLmNoaWxkczogYW55W11cclxuKSA9PiB7XHJcbiAgbGV0IGVsZW1lbnQgPSBudWxsO1xyXG4gIGlmICh0YWdOYW1lIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcclxuICAgIGlmIChhdHRyaWJ1dGVzID09PSBudWxsKSBhdHRyaWJ1dGVzID0ge307XHJcbiAgICBhdHRyaWJ1dGVzW1wiY2hpbGRyZW5cIl0gPSBjaGlsZHM7XHJcbiAgICBlbGVtZW50ID0gKHRhZ05hbWUgYXMgYW55KShhdHRyaWJ1dGVzKTtcclxuICAgIGlmIChlbGVtZW50KSBlbGVtZW50W1wiJHByb3BzXCJdID0gYXR0cmlidXRlcztcclxuICB9IGVsc2Uge1xyXG4gICAgaWYgKHRhZ05hbWUgPT09IEZyYWdtZW50KSB7XHJcbiAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lIGFzIGFueSk7XHJcbiAgICAgIGF0dHJpYnV0ZXMgJiYgc2V0RWxlbWVudEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcywgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgZWxlbWVudFtcIiRwcm9wc1wiXSA9IGF0dHJpYnV0ZXM7XHJcbiAgICBjaGlsZHMgJiYgY2hpbGRzLmxlbmd0aCAmJiBhZGRDaGlsZEVsZW1lbnRzKGVsZW1lbnQsIGNoaWxkcyk7XHJcbiAgfVxyXG4gIHJldHVybiBlbGVtZW50O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVN2Z0VsZW1lbnQgPSAoXHJcbiAgdGFnTmFtZTogc3RyaW5nLFxyXG4gIGF0dHJpYnV0ZXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0sXHJcbiAgLi4uY2hpbGRzOiBhbnlbXVxyXG4pID0+IHtcclxuICBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmdOUywgdGFnTmFtZSk7XHJcbiAgYXR0cmlidXRlcyAmJiBzZXRFbGVtZW50QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzLCB0cnVlKTtcclxuICBjaGlsZHMgJiYgY2hpbGRzLmxlbmd0aCAmJiBhZGRDaGlsZEVsZW1lbnRzKGVsZW1lbnQsIGNoaWxkcyk7XHJcbiAgcmV0dXJuIGVsZW1lbnQ7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgYWRkQ2hpbGRFbGVtZW50cyA9IChlbGVtZW50LCBjaGlsZHMpID0+IHtcclxuICBsZXQgcHJvcHMgPSBudWxsO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHNbaV0pKSBhZGRDaGlsZEVsZW1lbnRzKGVsZW1lbnQsIGNoaWxkc1tpXSk7XHJcbiAgICBlbHNlIGlmIChjaGlsZHNbaV0gaW5zdGFuY2VvZiBGdW5jdGlvbikgY2hpbGRzW2ldKGVsZW1lbnQpO1xyXG4gICAgZWxzZSB7XHJcbiAgICAgIGlmIChjaGlsZHNbaV0pIHtcclxuICAgICAgICBwcm9wcyA9IGNoaWxkc1tpXVtcIiRwcm9wc1wiXTtcclxuICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKFxyXG4gICAgICAgICAgY2hpbGRzW2ldIGluc3RhbmNlb2YgTm9kZVxyXG4gICAgICAgICAgICA/IGNoaWxkc1tpXVxyXG4gICAgICAgICAgICA6IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNoaWxkc1tpXSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHByb3BzICYmIHByb3BzLmRpZE1vdW50ICYmIHByb3BzLmRpZE1vdW50KGVsZW1lbnQsIGNoaWxkc1tpXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlVGV4dE5vZGUgPSBwYXJlbnQgPT4ge1xyXG4gIHJldHVybiBwYXJlbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIikpO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBGSnN4VmFsdWUgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7IE9ic2VydmFibGVBcnJheSB9IGZyb20gXCIuL29ic2VydmFibGUtYXJyYXlcIjtcbmltcG9ydCB7IGNvbXB1dGUgfSBmcm9tIFwiLi9mXCI7XG5cbmV4cG9ydCBjb25zdCBjb25kaXRpb25hbEVsZW1lbnQgPSAocGFyZW50RWxlbWVudCwgb2xkRWxlbWVudCwgbmV3RWxlbWVudCkgPT4ge1xuICBpZiAobmV3RWxlbWVudCBpbnN0YW5jZW9mIE5vZGUgPT09IGZhbHNlKVxuICAgIG5ld0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuZXdFbGVtZW50IHx8IFwiXCIpO1xuICBpZiAob2xkRWxlbWVudCkgcGFyZW50RWxlbWVudC5yZXBsYWNlQ2hpbGQobmV3RWxlbWVudCwgb2xkRWxlbWVudCk7XG4gIGVsc2UgcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChuZXdFbGVtZW50KTtcbiAgcmV0dXJuIG5ld0VsZW1lbnQ7XG59O1xuXG5leHBvcnQgY29uc3QgaW5zZXJ0VG9Eb20gPSAocGFyZW50RWxlbWVudCwgaW5kZXgsIGl0ZW1FbGVtZW50KSA9PiB7XG4gIGlmIChpdGVtRWxlbWVudCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSBpdGVtRWxlbWVudChwYXJlbnRFbGVtZW50KTtcbiAgZWxzZSB7XG4gICAgaWYgKGl0ZW1FbGVtZW50IGluc3RhbmNlb2YgTm9kZSA9PT0gZmFsc2UpXG4gICAgICBpdGVtRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGl0ZW1FbGVtZW50KTtcbiAgICBwYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShpdGVtRWxlbWVudCwgcGFyZW50RWxlbWVudC5jaGlsZE5vZGVzW2luZGV4XSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBhcnJheU1hcCA9IChcbiAgYXJyOiBGSnN4VmFsdWU8YW55W10+LFxuICBwYXJlbnREb206IEhUTUxFbGVtZW50LFxuICByZW5kZXJSZXR1cm46IChpdGVtOiBhbnksIGlkeD86IG51bWJlciwgaXNJbnNlcnQ/OiBib29sZWFuKSA9PiB2b2lkXG4pID0+IHtcbiAgY29uc3Qgb0FyciA9XG4gICAgYXJyLiR2YWwgaW5zdGFuY2VvZiBPYnNlcnZhYmxlQXJyYXlcbiAgICAgID8gYXJyLiR2YWxcbiAgICAgIDogbmV3IE9ic2VydmFibGVBcnJheShhcnIuJHZhbCk7XG5cbiAgb0Fyci5vbihcIml0ZW1hZGRlZFwiLCBmdW5jdGlvbihlKSB7XG4gICAgaW5zZXJ0VG9Eb20ocGFyZW50RG9tLCBlLmluZGV4LCByZW5kZXJSZXR1cm4oZS5pdGVtLCBlLmluZGV4KSk7XG4gIH0pO1xuXG4gIG9BcnIub24oXCJpdGVtc2V0XCIsIGZ1bmN0aW9uKGUpIHtcbiAgICBwYXJlbnREb20ucmVwbGFjZUNoaWxkKFxuICAgICAgcmVuZGVyUmV0dXJuKGUuaXRlbSwgZS5pbmRleCkgYXMgYW55LFxuICAgICAgcGFyZW50RG9tLmNoaWxkTm9kZXMuaXRlbShlLmluZGV4KVxuICAgICk7XG4gIH0pO1xuXG4gIG9BcnIub24oXCJpdGVtcmVtb3ZlZFwiLCBmdW5jdGlvbihlKSB7XG4gICAgcGFyZW50RG9tLnJlbW92ZUNoaWxkKHBhcmVudERvbS5jaGlsZE5vZGVzLml0ZW0oZS5pbmRleCkpO1xuICB9KTtcbiAgYXJyKG9BcnIpO1xuXG4gIGNvbnN0IHJlbmRlckFsbCA9ICgpID0+IHtcbiAgICBpZiAoYXJyLiR2YWwubGVuZ3RoID09PSAwKSBwYXJlbnREb20udGV4dENvbnRlbnQgPSBcIlwiO1xuICAgIGVsc2Uge1xuICAgICAgcGFyZW50RG9tLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICAgIGZvciAodmFyIGkgPSBwYXJlbnREb20uY2hpbGRFbGVtZW50Q291bnQ7IGkgPCBhcnIuJHZhbC5sZW5ndGg7IGkrKylcbiAgICAgICAgaW5zZXJ0VG9Eb20ocGFyZW50RG9tLCBpLCByZW5kZXJSZXR1cm4oYXJyLiR2YWxbaV0sIGkpKTtcbiAgICB9XG4gIH07XG4gIGNvbXB1dGUocmVuZGVyQWxsLCBhcnIpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=