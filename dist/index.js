!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=[],o={};t.startContext=((e,t)=>{o[e]||(o[e]=[]),o[e].push(t),r.push(e)}),t.getContextValue=((e,t)=>t&&t.$context[e]?t.$context[e]:o[e]?o[e][o[e].length-1]:void 0),t.injectContexts=(e=>{e.$context||Object.defineProperty(e,"$context",{configurable:!1,enumerable:!1,value:{}});let t=null;for(var n=0;n<r.length;n++)t=r[n],e.$context[t]=o[t][o[t].length-1]}),t.endContext=(e=>{o[e].pop(),r.pop()}),t.Context=(e=>null)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EventedArray=function(e){var t=this,n=[],r={itemadded:[],itemremoved:[],itemset:[]};function o(e){e in t||Object.defineProperty(t,e,{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(t){n[e]=t,i({type:"itemset",index:e,item:t})}})}function i(e){r[e.type].forEach(function(n){n.call(t,e)})}t.on=function(e,t){r[e].push(t)},t.off=function(e,t){for(var n=r[e],o=n.length;--o>=0;)n[o]===t&&n.splice(o,1)},t.push=function(){for(var e,t=0,r=arguments.length;t<r;t++)e=n.length,n.push(arguments[t]),o(e),i({type:"itemadded",index:e,item:arguments[t]});return n.length},t.pop=function(){if(n.length>-1){var e=n.length-1,r=n.pop();return delete t[e],i({type:"itemremoved",index:e,item:r}),r}},t.unshift=function(){for(var e=0,t=arguments.length;e<t;e++)n.splice(e,0,arguments[e]),o(n.length-1),i({type:"itemadded",index:e,item:arguments[e]});for(;e<n.length;e++)i({type:"itemset",index:e,item:n[e]});return n.length},t.shift=function(){if(n.length>-1){var e=n.shift();return delete t[n.length],i({type:"itemremoved",index:0,item:e}),e}},t.splice=function(e,r){var s,u=[];for(e=null==e?0:e<0?n.length+e:e,r=null==r?n.length-e:r>0?r:0;r--;)s=n.splice(e,1)[0],u.push(s),delete t[n.length],i({type:"itemremoved",index:e+u.length-1,item:s});for(var l=2,c=arguments.length;l<c;l++)n.splice(e,0,arguments[l]),o(n.length-1),i({type:"itemadded",index:e,item:arguments[l]}),e++;return u},Object.defineProperty(t,"length",{configurable:!1,enumerable:!1,get:function(){return n.length},set:function(e){var r=Number(e),o=n.length;if(!(r%1==0&&r>=0))throw new RangeError("Invalid array length");return r<o?t.splice(r):r>o&&t.push.apply(t,new Array(r-o)),n.length=r,e}}),Object.defineProperty(t,"innerArray",{configurable:!1,enumerable:!1,get:function(){return n},set:function(e){n=e}}),Object.getOwnPropertyNames(Array.prototype).forEach(function(e){e in t||Object.defineProperty(t,e,{configurable:!1,enumerable:!1,writable:!1,value:Array.prototype[e]})}),t.toJSON=(()=>n),e instanceof Array&&t.push.apply(t,e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);t.value=((e,t)=>{const n=e=>{Array.isArray(e)?n.$val.innerArray=e:n.$val=e;const t=n.computes;if(t.length)for(var r=0;r<t.length;r++)!t[r].freezed&&t[r](t[r].compute())};return n.$val=e,n.freezed=t,n.computes=[],e instanceof Function&&(n.compute=e),n.toJSON=(()=>n.$val),n}),t.array=(e=>{const n=t.value(new r.EventedArray(e));return n.on=n.$val.on,n.off=n.$val.off,n.toJSON=(()=>n.$val.innerArray),n}),t.on=((e,t,n)=>{e.$val.on(t,n)}),t.off=((e,t,n)=>{e.$val.off(t,n)}),t.compute=((e,...n)=>{for(var r=t.value(e),o=0;o<n.length;o++)n[o].computes.push(r);e()}),t.initCompute=((e,...n)=>{var r=t.value(e()),o=function(){r(e())};o.compute=r;for(var i=0;i<n.length;i++)n[i].computes.push(o);return r}),t.setCompute=((e,n,...r)=>(t.destroy(e),t.initCompute(n,...r))),t.destroy=(e=>{delete e.compute,delete e.computes})},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(2)),r(n(11)),r(n(10)),r(n(0)),r(n(9)),r(n(5))},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setDefaults=((e,t)=>{for(var n in t)void 0===e[n]&&(e[n]=t[n])})},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t),function(e,r){var o,i=n(4);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var s=Object(i.a)(o);t.default=s}.call(this,n(7),n(6)(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3),o=n(8);class i{constructor(e){this.isUnsubscribed=!1,this.handlers=null,this._unsubscribe=null,this.handlers=e,this.isUnsubscribed=!1}next(e){this.handlers.next&&!this.isUnsubscribed&&this.handlers.next(e)}error(e){this.isUnsubscribed||(this.handlers.error&&this.handlers.error(e),this.unsubscribe())}complete(){this.isUnsubscribed||(this.handlers.complete&&this.handlers.complete(),this.unsubscribe())}unsubscribe(){this.isUnsubscribed=!0,this._unsubscribe&&this._unsubscribe()}}t.toObservable=(e=>new class{constructor(e){this._subscribe=null,this._subscribe=e}subscribe(e){const t=new i(e);return t._unsubscribe=this._subscribe(t),{unsubscribe(){t.unsubscribe()}}}[o.default](){return this}}(t=>{var n=r.value(()=>{t.next(e.$val)});e.computes.push(n)}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);var o=/^on[A-Z]/;t.Fragment=Symbol("fjsx.Fragment");const i=(e,t,n)=>{let r=null;for(var i in t)if((r=t[i])instanceof Function)o.test(i)?e[i=i.toLowerCase()]=r:r(e);else if(r instanceof Object)for(var s in r)"function"==typeof r[s]&&r[s](e);else n||-1!==i.indexOf("-")?e.setAttribute(i,r):e[i]=r};t.createElement=((e,n,...o)=>{let s=null;return e instanceof Function?(null===n&&(n={}),n.children=o,r.injectContexts(n),(s=e(n))&&(s.$props=n)):(e===t.Fragment?s=document.createDocumentFragment():(s=document.createElement(e),n&&i(s,n,!1)),s.$props=n,o&&o.length&&t.addChildElements(s,o)),s}),t.createSvgElement=((e,n,...r)=>{let o=document.createElementNS("http://www.w3.org/2000/svg",e);return n&&(n.className&&(n.class=n.className,delete n.className),i(o,n,!0)),r&&r.length&&t.addChildElements(o,r),o}),t.addChildElements=((e,n)=>{let r=null;for(var o=0;o<n.length;o++)Array.isArray(n[o])?t.addChildElements(e,n[o]):n[o]instanceof Function?n[o](e):n[o]&&(r=n[o].$props,e.appendChild(n[o]instanceof Node?n[o]:document.createTextNode(n[o])),r&&r.didMount&&r.didMount(e,n[o]))}),t.createTextNode=(e=>e.appendChild(document.createTextNode("")))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1),o=n(2);t.conditionalElement=((e,t,n)=>(n instanceof Node==!1&&(n=document.createTextNode(n||"")),t?e.replaceChild(n,t):e.appendChild(n),n)),t.insertToDom=((e,t,n)=>{n instanceof Function?n(e):(n instanceof Node==!1&&(n=document.createTextNode(n)),e.insertBefore(n,e.childNodes[t]))}),t.arrayMap=((e,n,i)=>{const s=e.$val instanceof r.EventedArray?e.$val:new r.EventedArray(e.$val);s.on("itemadded",function(e){t.insertToDom(n,e.index,i(e.item,e.index))}),s.on("itemset",function(e){n.replaceChild(i(e.item,e.index),n.childNodes.item(e.index))}),s.on("itemremoved",function(e){n.removeChild(n.childNodes.item(e.index))}),e(s);o.compute(()=>{if(0===e.$val.length)n.textContent="";else{n.textContent="";for(var r=n.childElementCount;r<e.$val.length;r++)t.insertToDom(n,r,i(e.$val[r],r))}},e)})}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbGliL2NvbnRleHQudHMiLCJ3ZWJwYWNrOi8vLy4vbGliL2V2ZW50ZWQtYXJyYXkudHMiLCJ3ZWJwYWNrOi8vLy4vbGliL2YudHMiLCJ3ZWJwYWNrOi8vLy4vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL2xpYi91dGlsLnRzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9saWIvb2JzZXJ2YWJsZS50cyIsIndlYnBhY2s6Ly8vLi9saWIvZG9tLXRyZWUudHMiLCJ3ZWJwYWNrOi8vLy4vbGliL2RvbS50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiYWN0aXZlQ29udGV4dEtleXMiLCJhcHBDb250ZXh0Iiwic3RhcnRDb250ZXh0Iiwia2V5IiwicHVzaCIsImdldENvbnRleHRWYWx1ZSIsImNvbXBvbmVudFByb3BzIiwibGVuZ3RoIiwiaW5qZWN0Q29udGV4dHMiLCJlbmRDb250ZXh0IiwicG9wIiwiQ29udGV4dCIsInByb3BzIiwiRXZlbnRlZEFycmF5IiwiaXRlbXMiLCJfc2VsZiIsInRoaXMiLCJfYXJyYXkiLCJfaGFuZGxlcnMiLCJpdGVtYWRkZWQiLCJpdGVtcmVtb3ZlZCIsIml0ZW1zZXQiLCJkZWZpbmVJbmRleFByb3BlcnR5IiwiaW5kZXgiLCJzZXQiLCJ2IiwicmFpc2VFdmVudCIsInR5cGUiLCJpdGVtIiwiZXZlbnQiLCJmb3JFYWNoIiwiaCIsIm9uIiwiZXZlbnROYW1lIiwiaGFuZGxlciIsIm9mZiIsImxuIiwic3BsaWNlIiwiYXJndW1lbnRzIiwidW5zaGlmdCIsInNoaWZ0IiwiaG93TWFueSIsInJlbW92ZWQiLCJOdW1iZXIiLCJSYW5nZUVycm9yIiwiYXBwbHkiLCJBcnJheSIsImdldE93blByb3BlcnR5TmFtZXMiLCJ3cml0YWJsZSIsInRvSlNPTiIsImV2ZW50ZWRfYXJyYXlfMSIsImZyZWV6ZWQiLCJpbm5lckZuIiwidmFsIiwiaXNBcnJheSIsImlubmVyQXJyYXkiLCJjb21wdXRlcyIsImNvbXB1dGUiLCJGdW5jdGlvbiIsImFycmF5IiwiYXJyIiwiJHZhbCIsImNhbGxiYWNrIiwiZm4iLCJhcmdzIiwiaW5pdENvbXB1dGUiLCJjVmFsdWUiLCJjbXBJbm5lciIsInNldENvbXB1dGUiLCJwcmV2IiwiZGVzdHJveSIsIl9fZXhwb3J0Iiwic3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsIiwicm9vdCIsInJlc3VsdCIsIlN5bWJvbCIsIm9ic2VydmFibGUiLCJzZXREZWZhdWx0cyIsIm9iaiIsImRlZmF1bHRzIiwidW5kZWZpbmVkIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJjcmVhdGUiLCJjaGlsZHJlbiIsImciLCJldmFsIiwiZSIsIndpbmRvdyIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwic2VsZiIsImdsb2JhbCIsIl9fd2VicGFja19leHBvcnRzX18iLCJfXzEiLCJzeW1ib2xfb2JzZXJ2YWJsZV8xIiwiT2JzZXJ2ZXIiLCJbb2JqZWN0IE9iamVjdF0iLCJoYW5kbGVycyIsImlzVW5zdWJzY3JpYmVkIiwiX3Vuc3Vic2NyaWJlIiwibmV4dCIsImVycm9yIiwidW5zdWJzY3JpYmUiLCJjb21wbGV0ZSIsInRvT2JzZXJ2YWJsZSIsImRhdGEiLCJzdWJzY3JpYmUiLCJfc3Vic2NyaWJlIiwib2JzIiwib2JzZXJ2ZXIiLCJkZWZhdWx0IiwiY29udGV4dF8xIiwianN4RXZlbnRQcm9wZXJ0eSIsIkZyYWdtZW50Iiwic2V0RWxlbWVudEF0dHJpYnV0ZXMiLCJlbGVtZW50IiwiYXR0cmlidXRlcyIsImZvcmNlU2V0QXR0ciIsImF0dHJpYnV0ZSIsImF0dHJpYnV0ZU5hbWUiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwic2V0QXR0cmlidXRlIiwiY3JlYXRlRWxlbWVudCIsInRhZ05hbWUiLCJjaGlsZHMiLCJkb2N1bWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJhZGRDaGlsZEVsZW1lbnRzIiwiY3JlYXRlU3ZnRWxlbWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImNsYXNzTmFtZSIsImNsYXNzIiwiYXBwZW5kQ2hpbGQiLCJOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJkaWRNb3VudCIsInBhcmVudCIsImZfMSIsImNvbmRpdGlvbmFsRWxlbWVudCIsInBhcmVudEVsZW1lbnQiLCJvbGRFbGVtZW50IiwibmV3RWxlbWVudCIsInJlcGxhY2VDaGlsZCIsImluc2VydFRvRG9tIiwiaXRlbUVsZW1lbnQiLCJpbnNlcnRCZWZvcmUiLCJjaGlsZE5vZGVzIiwiYXJyYXlNYXAiLCJwYXJlbnREb20iLCJyZW5kZXJSZXR1cm4iLCJvQXJyIiwicmVtb3ZlQ2hpbGQiLCJ0ZXh0Q29udGVudCIsImNoaWxkRWxlbWVudENvdW50Il0sIm1hcHBpbmdzIjoiNkRBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFH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K0ssRUFBVUssa0JBQW1CcEwsRUFBSXFGLEVBQUlDLEtBQUt0RCxPQUFRaEMsSUFDN0RGLEVBQUE0SyxZQUFZSyxFQUFXL0ssRUFBR2dMLEVBQWEzRixFQUFJQyxLQUFLdEYsR0FBSUEsTUFHdkNxRiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMyk7XG4iLCJjb25zdCBhY3RpdmVDb250ZXh0S2V5cyA9IFtdO1xuY29uc3QgYXBwQ29udGV4dDogeyBba2V5OiBzdHJpbmddOiBhbnlbXSB9ID0ge307XG5cbmV4cG9ydCBjb25zdCBzdGFydENvbnRleHQgPSAoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgaWYgKCFhcHBDb250ZXh0W2tleV0pIGFwcENvbnRleHRba2V5XSA9IFtdO1xuICBhcHBDb250ZXh0W2tleV0ucHVzaCh2YWx1ZSk7XG4gIGFjdGl2ZUNvbnRleHRLZXlzLnB1c2goa2V5KTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDb250ZXh0VmFsdWUgPSAoa2V5OiBzdHJpbmcsIGNvbXBvbmVudFByb3BzOiBhbnkpID0+IHtcbiAgaWYgKGNvbXBvbmVudFByb3BzICYmIGNvbXBvbmVudFByb3BzW1wiJGNvbnRleHRcIl1ba2V5XSlcbiAgICByZXR1cm4gY29tcG9uZW50UHJvcHNbXCIkY29udGV4dFwiXVtrZXldO1xuICBpZiAoYXBwQ29udGV4dFtrZXldKSByZXR1cm4gYXBwQ29udGV4dFtrZXldW2FwcENvbnRleHRba2V5XS5sZW5ndGggLSAxXTtcbn07XG5cbmV4cG9ydCBjb25zdCBpbmplY3RDb250ZXh0cyA9IChjb21wb25lbnRQcm9wczogYW55KSA9PiB7XG4gIGlmICghY29tcG9uZW50UHJvcHNbXCIkY29udGV4dFwiXSlcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29tcG9uZW50UHJvcHMsIFwiJGNvbnRleHRcIiwge1xuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgdmFsdWU6IHt9XG4gICAgfSk7XG4gIGxldCBrZXkgPSBudWxsO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFjdGl2ZUNvbnRleHRLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gYWN0aXZlQ29udGV4dEtleXNbaV07XG4gICAgY29tcG9uZW50UHJvcHNbXCIkY29udGV4dFwiXVtrZXldID1cbiAgICAgIGFwcENvbnRleHRba2V5XVthcHBDb250ZXh0W2tleV0ubGVuZ3RoIC0gMV07XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBlbmRDb250ZXh0ID0gKGtleTogc3RyaW5nKSA9PiB7XG4gIGFwcENvbnRleHRba2V5XS5wb3AoKTtcbiAgYWN0aXZlQ29udGV4dEtleXMucG9wKCk7XG59O1xuXG5leHBvcnQgY29uc3QgQ29udGV4dCA9IChwcm9wczogeyBrZXk6IHN0cmluZzsgdmFsdWU6IGFueSB9KSA9PiBudWxsO1xuIiwiLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTEwMDM3Ni9ob3ctdG8td2F0Y2gtZm9yLWFycmF5LWNoYW5nZXNcbmV4cG9ydCBmdW5jdGlvbiBFdmVudGVkQXJyYXkoaXRlbXMpIHtcbiAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICBfYXJyYXkgPSBbXSxcbiAgICBfaGFuZGxlcnMgPSB7XG4gICAgICBpdGVtYWRkZWQ6IFtdLFxuICAgICAgaXRlbXJlbW92ZWQ6IFtdLFxuICAgICAgaXRlbXNldDogW11cbiAgICB9O1xuXG4gIGZ1bmN0aW9uIGRlZmluZUluZGV4UHJvcGVydHkoaW5kZXgpIHtcbiAgICBpZiAoIShpbmRleCBpbiBfc2VsZikpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfc2VsZiwgaW5kZXgsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfYXJyYXlbaW5kZXhdO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICBfYXJyYXlbaW5kZXhdID0gdjtcbiAgICAgICAgICByYWlzZUV2ZW50KHtcbiAgICAgICAgICAgIHR5cGU6IFwiaXRlbXNldFwiLFxuICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgICAgaXRlbTogdlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByYWlzZUV2ZW50KGV2ZW50KSB7XG4gICAgX2hhbmRsZXJzW2V2ZW50LnR5cGVdLmZvckVhY2goZnVuY3Rpb24oaCkge1xuICAgICAgaC5jYWxsKF9zZWxmLCBldmVudCk7XG4gICAgfSk7XG4gIH1cblxuICBfc2VsZi5vbiA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgIF9oYW5kbGVyc1tldmVudE5hbWVdLnB1c2goaGFuZGxlcik7XG4gIH07XG5cbiAgX3NlbGYub2ZmID0gZnVuY3Rpb24oZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgdmFyIGggPSBfaGFuZGxlcnNbZXZlbnROYW1lXTtcbiAgICB2YXIgbG4gPSBoLmxlbmd0aDtcbiAgICB3aGlsZSAoLS1sbiA+PSAwKSB7XG4gICAgICBpZiAoaFtsbl0gPT09IGhhbmRsZXIpIHtcbiAgICAgICAgaC5zcGxpY2UobG4sIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfc2VsZi5wdXNoID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluZGV4O1xuICAgIGZvciAodmFyIGkgPSAwLCBsbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsbjsgaSsrKSB7XG4gICAgICBpbmRleCA9IF9hcnJheS5sZW5ndGg7XG4gICAgICBfYXJyYXkucHVzaChhcmd1bWVudHNbaV0pO1xuICAgICAgZGVmaW5lSW5kZXhQcm9wZXJ0eShpbmRleCk7XG4gICAgICByYWlzZUV2ZW50KHtcbiAgICAgICAgdHlwZTogXCJpdGVtYWRkZWRcIixcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICBpdGVtOiBhcmd1bWVudHNbaV1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gX2FycmF5Lmxlbmd0aDtcbiAgfTtcblxuICBfc2VsZi5wb3AgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoX2FycmF5Lmxlbmd0aCA+IC0xKSB7XG4gICAgICB2YXIgaW5kZXggPSBfYXJyYXkubGVuZ3RoIC0gMSxcbiAgICAgICAgaXRlbSA9IF9hcnJheS5wb3AoKTtcbiAgICAgIGRlbGV0ZSBfc2VsZltpbmRleF07XG4gICAgICByYWlzZUV2ZW50KHtcbiAgICAgICAgdHlwZTogXCJpdGVtcmVtb3ZlZFwiLFxuICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgIGl0ZW06IGl0ZW1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICB9O1xuXG4gIF9zZWxmLnVuc2hpZnQgPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbG47IGkrKykge1xuICAgICAgX2FycmF5LnNwbGljZShpLCAwLCBhcmd1bWVudHNbaV0pO1xuICAgICAgZGVmaW5lSW5kZXhQcm9wZXJ0eShfYXJyYXkubGVuZ3RoIC0gMSk7XG4gICAgICByYWlzZUV2ZW50KHtcbiAgICAgICAgdHlwZTogXCJpdGVtYWRkZWRcIixcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIGl0ZW06IGFyZ3VtZW50c1tpXVxuICAgICAgfSk7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgX2FycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICByYWlzZUV2ZW50KHtcbiAgICAgICAgdHlwZTogXCJpdGVtc2V0XCIsXG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgICBpdGVtOiBfYXJyYXlbaV1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gX2FycmF5Lmxlbmd0aDtcbiAgfTtcblxuICBfc2VsZi5zaGlmdCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChfYXJyYXkubGVuZ3RoID4gLTEpIHtcbiAgICAgIHZhciBpdGVtID0gX2FycmF5LnNoaWZ0KCk7XG4gICAgICBkZWxldGUgX3NlbGZbX2FycmF5Lmxlbmd0aF07XG4gICAgICByYWlzZUV2ZW50KHtcbiAgICAgICAgdHlwZTogXCJpdGVtcmVtb3ZlZFwiLFxuICAgICAgICBpbmRleDogMCxcbiAgICAgICAgaXRlbTogaXRlbVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG4gIH07XG5cbiAgX3NlbGYuc3BsaWNlID0gZnVuY3Rpb24oaW5kZXgsIGhvd01hbnkgLyosIGVsZW1lbnQxLCBlbGVtZW50MiwgLi4uICovKSB7XG4gICAgdmFyIHJlbW92ZWQgPSBbXSxcbiAgICAgIGl0ZW0sXG4gICAgICBwb3M7XG5cbiAgICBpbmRleCA9IGluZGV4ID09IG51bGwgPyAwIDogaW5kZXggPCAwID8gX2FycmF5Lmxlbmd0aCArIGluZGV4IDogaW5kZXg7XG5cbiAgICBob3dNYW55ID1cbiAgICAgIGhvd01hbnkgPT0gbnVsbCA/IF9hcnJheS5sZW5ndGggLSBpbmRleCA6IGhvd01hbnkgPiAwID8gaG93TWFueSA6IDA7XG5cbiAgICB3aGlsZSAoaG93TWFueS0tKSB7XG4gICAgICBpdGVtID0gX2FycmF5LnNwbGljZShpbmRleCwgMSlbMF07XG4gICAgICByZW1vdmVkLnB1c2goaXRlbSk7XG4gICAgICBkZWxldGUgX3NlbGZbX2FycmF5Lmxlbmd0aF07XG4gICAgICByYWlzZUV2ZW50KHtcbiAgICAgICAgdHlwZTogXCJpdGVtcmVtb3ZlZFwiLFxuICAgICAgICBpbmRleDogaW5kZXggKyByZW1vdmVkLmxlbmd0aCAtIDEsXG4gICAgICAgIGl0ZW06IGl0ZW1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAyLCBsbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsbjsgaSsrKSB7XG4gICAgICBfYXJyYXkuc3BsaWNlKGluZGV4LCAwLCBhcmd1bWVudHNbaV0pO1xuICAgICAgZGVmaW5lSW5kZXhQcm9wZXJ0eShfYXJyYXkubGVuZ3RoIC0gMSk7XG4gICAgICByYWlzZUV2ZW50KHtcbiAgICAgICAgdHlwZTogXCJpdGVtYWRkZWRcIixcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICBpdGVtOiBhcmd1bWVudHNbaV1cbiAgICAgIH0pO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICByZXR1cm4gcmVtb3ZlZDtcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3NlbGYsIFwibGVuZ3RoXCIsIHtcbiAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gX2FycmF5Lmxlbmd0aDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBuID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgIHZhciBsZW5ndGggPSBfYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKG4gJSAxID09PSAwICYmIG4gPj0gMCkge1xuICAgICAgICBpZiAobiA8IGxlbmd0aCkge1xuICAgICAgICAgIF9zZWxmLnNwbGljZShuKTtcbiAgICAgICAgfSBlbHNlIGlmIChuID4gbGVuZ3RoKSB7XG4gICAgICAgICAgX3NlbGYucHVzaC5hcHBseShfc2VsZiwgbmV3IEFycmF5KG4gLSBsZW5ndGgpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIGFycmF5IGxlbmd0aFwiKTtcbiAgICAgIH1cbiAgICAgIF9hcnJheS5sZW5ndGggPSBuO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9zZWxmLCBcImlubmVyQXJyYXlcIiwge1xuICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfYXJyYXk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIC8vIF9zZWxmLnB1c2guYXBwbHkoX3NlbGYsIHYpOyAvLyByZW5kZXJBbGxcbiAgICAgIF9hcnJheSA9IHY7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhBcnJheS5wcm90b3R5cGUpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgIGlmICghKG5hbWUgaW4gX3NlbGYpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3NlbGYsIG5hbWUsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IEFycmF5LnByb3RvdHlwZVtuYW1lXVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICBfc2VsZi50b0pTT04gPSAoKSA9PiB7XG4gICAgcmV0dXJuIF9hcnJheTtcbiAgfTtcblxuICBpZiAoaXRlbXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIF9zZWxmLnB1c2guYXBwbHkoX3NlbGYsIGl0ZW1zKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRXZlbnRlZEFycmF5IH0gZnJvbSBcIi4vZXZlbnRlZC1hcnJheVwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGSnN4VmFsdWU8VD4ge1xyXG4gICh2YWw6IFQpOiB2b2lkO1xyXG4gIHJlYWRvbmx5ICR2YWw6IFQ7XHJcbiAgZnJlZXplZDogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgRmpzeEFycmF5RXZlbnRUeXBlID0gXCJpdGVtYWRkZWRcIiB8IFwiaXRlbXNldFwiIHwgXCJpdGVtcmVtb3ZlZFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHZhbHVlID0gPFQ+KHZhbHVlOiBULCBmcmVlemVkPzogYm9vbGVhbik6IEZKc3hWYWx1ZTxUPiA9PiB7XHJcbiAgY29uc3QgaW5uZXJGbjogYW55ID0gKHZhbD8pID0+IHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcclxuICAgICAgLy8gVE9ETyBodHRwczovL2dpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi9tYWppbmJ1dVxyXG4gICAgICBpbm5lckZuW1wiJHZhbFwiXS5pbm5lckFycmF5ID0gdmFsO1xyXG4gICAgfSBlbHNlIGlubmVyRm5bXCIkdmFsXCJdID0gdmFsO1xyXG4gICAgY29uc3QgY29tcHV0ZXMgPSBpbm5lckZuW1wiY29tcHV0ZXNcIl07XHJcbiAgICBpZiAoY29tcHV0ZXMubGVuZ3RoKVxyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXB1dGVzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICFjb21wdXRlc1tpXVtcImZyZWV6ZWRcIl0gJiYgY29tcHV0ZXNbaV0oY29tcHV0ZXNbaV0uY29tcHV0ZSgpKTtcclxuICB9O1xyXG4gIGlubmVyRm5bXCIkdmFsXCJdID0gdmFsdWU7XHJcbiAgaW5uZXJGbltcImZyZWV6ZWRcIl0gPSBmcmVlemVkO1xyXG5cclxuICBpbm5lckZuW1wiY29tcHV0ZXNcIl0gPSBbXTtcclxuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBGdW5jdGlvbikgaW5uZXJGbltcImNvbXB1dGVcIl0gPSB2YWx1ZTtcclxuICBpbm5lckZuLnRvSlNPTiA9ICgpID0+IGlubmVyRm5bXCIkdmFsXCJdO1xyXG4gIHJldHVybiBpbm5lckZuO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGFycmF5ID0gPFQ+KFxyXG4gIGl0ZW1zOiBUW11cclxuKToge1xyXG4gIG9uPzogKFxyXG4gICAgdHlwZTogRmpzeEFycmF5RXZlbnRUeXBlLFxyXG4gICAgY2FsbGJhY2s6IChlOiB7IGl0ZW06IFQ7IGluZGV4OiBudW1iZXIgfSkgPT4gdm9pZFxyXG4gICkgPT4gdm9pZDtcclxuICByZW1vdmVFdmVudExpc3RlbmVyPzogKHR5cGU6IEZqc3hBcnJheUV2ZW50VHlwZSkgPT4gdm9pZDtcclxuICAkdmFsOiBUW107XHJcbn0gPT4ge1xyXG4gIGNvbnN0IGFyciA9IHZhbHVlKG5ldyBFdmVudGVkQXJyYXkoaXRlbXMpKSBhcyBhbnk7XHJcbiAgYXJyLm9uID0gYXJyLiR2YWwub247XHJcbiAgYXJyLm9mZiA9IGFyci4kdmFsLm9mZjtcclxuICBhcnIudG9KU09OID0gKCkgPT4gYXJyLiR2YWwuaW5uZXJBcnJheTtcclxuXHJcbiAgcmV0dXJuIGFycjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBvbiA9IChcclxuICBhcnI6IGFueVtdLFxyXG4gIHR5cGU6IEZqc3hBcnJheUV2ZW50VHlwZSxcclxuICBjYWxsYmFjazogKGU6IHsgaXRlbTogYW55OyBpbmRleDogbnVtYmVyIH0pID0+IHZvaWRcclxuKSA9PiB7XHJcbiAgYXJyW1wiJHZhbFwiXS5vbih0eXBlLCBjYWxsYmFjayk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgb2ZmID0gKFxyXG4gIGFycjogYW55W10sXHJcbiAgdHlwZTogRmpzeEFycmF5RXZlbnRUeXBlLFxyXG4gIGNhbGxiYWNrOiAoZTogeyBpdGVtOiBhbnk7IGluZGV4OiBudW1iZXIgfSkgPT4gdm9pZFxyXG4pID0+IHtcclxuICBhcnJbXCIkdmFsXCJdLm9mZih0eXBlLCBjYWxsYmFjayk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY29tcHV0ZSA9IChmbjogKCkgPT4gdm9pZCwgLi4uYXJnczogYW55W10pID0+IHtcclxuICB2YXIgY29tcHV0ZSA9IHZhbHVlKGZuKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIGFyZ3NbaV1bXCJjb21wdXRlc1wiXS5wdXNoKGNvbXB1dGUpO1xyXG4gIGZuKCk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgaW5pdENvbXB1dGUgPSAoZm46ICgpID0+IGFueSwgLi4uYXJnczogYW55W10pID0+IHtcclxuICB2YXIgY1ZhbHVlID0gdmFsdWUoZm4oKSk7XHJcbiAgdmFyIGNtcElubmVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICBjVmFsdWUoZm4oKSk7XHJcbiAgfTtcclxuICBjbXBJbm5lcltcImNvbXB1dGVcIl0gPSBjVmFsdWU7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSBhcmdzW2ldW1wiY29tcHV0ZXNcIl0ucHVzaChjbXBJbm5lcik7XHJcblxyXG4gIHJldHVybiBjVmFsdWU7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgc2V0Q29tcHV0ZSA9IChwcmV2OiBhbnksIGZuOiAoKSA9PiB2b2lkLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xyXG4gIGRlc3Ryb3kocHJldik7XHJcbiAgcmV0dXJuIGluaXRDb21wdXRlKGZuLCAuLi5hcmdzKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBkZXN0cm95ID0gKGl0ZW06IGFueSkgPT4ge1xyXG4gIGRlbGV0ZSBpdGVtW1wiY29tcHV0ZVwiXTtcclxuICBkZWxldGUgaXRlbVtcImNvbXB1dGVzXCJdO1xyXG59O1xyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiSlNYLmQudHNcIiAvPlxuXG5leHBvcnQgKiBmcm9tIFwiLi9saWIvZlwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbGliL2RvbVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbGliL2RvbS10cmVlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9saWIvY29udGV4dFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbGliL29ic2VydmFibGVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpYi91dGlsXCI7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiaW1wb3J0IHsgdmFsdWUgfSBmcm9tIFwiLi9mXCI7XG5cbmV4cG9ydCBjb25zdCBzZXREZWZhdWx0cyA9IDxUPihcbiAgb2JqOiBULFxuICBkZWZhdWx0czogeyBba2V5IGluIGtleW9mIFRdPzogYW55IH1cbikgPT4ge1xuICBmb3IgKHZhciBrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICBpZiAob2JqW2tleV0gPT09IHVuZGVmaW5lZCkgb2JqW2tleV0gPSBkZWZhdWx0c1trZXldO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xyXG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWVcclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcbiIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2ggKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJpbXBvcnQgeyBGSnN4VmFsdWUsIHZhbHVlIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgJCRzeW1ib2xPYnNlcnZhYmxlIGZyb20gXCJzeW1ib2wtb2JzZXJ2YWJsZVwiO1xuXG4vLyBodHRwczovL21lZGl1bS5jb20vQGZrbnVzc2VsL2Etc2ltcGxlLW9ic2VydmFibGUtaW1wbGVtZW50YXRpb24tYzljODA5Yzg5YzY5XG5cbmNsYXNzIE9ic2VydmVyIHtcbiAgaXNVbnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgaGFuZGxlcnM6IFBhcnRpYWw8T2JzZXJ2ZXI+ID0gbnVsbDtcbiAgX3Vuc3Vic2NyaWJlID0gbnVsbDtcbiAgY29uc3RydWN0b3IoaGFuZGxlcnM6IFBhcnRpYWw8T2JzZXJ2ZXI+KSB7XG4gICAgdGhpcy5oYW5kbGVycyA9IGhhbmRsZXJzOyAvLyBuZXh0LCBlcnJvciBhbmQgY29tcGxldGUgbG9naWNcbiAgICB0aGlzLmlzVW5zdWJzY3JpYmVkID0gZmFsc2U7XG4gIH1cblxuICBuZXh0KHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnMubmV4dCAmJiAhdGhpcy5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgdGhpcy5oYW5kbGVycy5uZXh0KHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBlcnJvcihlcnJvcikge1xuICAgIGlmICghdGhpcy5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgaWYgKHRoaXMuaGFuZGxlcnMuZXJyb3IpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVycy5lcnJvcihlcnJvcik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBjb21wbGV0ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgIGlmICh0aGlzLmhhbmRsZXJzLmNvbXBsZXRlKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMuY29tcGxldGUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIHVuc3Vic2NyaWJlKCkge1xuICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3Vuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLl91bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBPYnNlcnZhYmxlIHtcbiAgX3N1YnNjcmliZTogKG9ic2VydmVyOiBPYnNlcnZlcikgPT4gKCkgPT4gdm9pZCA9IG51bGw7XG4gIGNvbnN0cnVjdG9yKHN1YnNjcmliZSkge1xuICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgfVxuXG4gIHN1YnNjcmliZShvYnM6IFBhcnRpYWw8T2JzZXJ2ZXI+KSB7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgT2JzZXJ2ZXIob2JzKTtcblxuICAgIG9ic2VydmVyLl91bnN1YnNjcmliZSA9IHRoaXMuX3N1YnNjcmliZShvYnNlcnZlcik7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIG9ic2VydmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIFskJHN5bWJvbE9ic2VydmFibGVdKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB0b09ic2VydmFibGUgPSA8VD4oZGF0YTogRkpzeFZhbHVlPGFueT4pOiBUID0+IHtcbiAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKG9ic2VydmVyID0+IHtcbiAgICB2YXIgY29tcHV0ZSA9IHZhbHVlKCgpID0+IHtcbiAgICAgIG9ic2VydmVyLm5leHQoZGF0YS4kdmFsKTtcbiAgICB9KTtcbiAgICBkYXRhW1wiY29tcHV0ZXNcIl0ucHVzaChjb21wdXRlKTtcbiAgfSkgYXMgYW55O1xufTtcbiIsImltcG9ydCB7IGluamVjdENvbnRleHRzIH0gZnJvbSBcIi4vY29udGV4dFwiO1xyXG5cclxudmFyIGpzeEV2ZW50UHJvcGVydHkgPSAvXm9uW0EtWl0vO1xyXG5jb25zdCBzdmdOUyA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtcclxuZXhwb3J0IGNvbnN0IEZyYWdtZW50ID0gU3ltYm9sKFwiZmpzeC5GcmFnbWVudFwiKTtcclxuXHJcbmNvbnN0IHNldEVsZW1lbnRBdHRyaWJ1dGVzID0gKFxyXG4gIGVsZW1lbnQ6IEVsZW1lbnQsXHJcbiAgYXR0cmlidXRlcyxcclxuICBmb3JjZVNldEF0dHI6IGJvb2xlYW5cclxuKSA9PiB7XHJcbiAgbGV0IGF0dHJpYnV0ZSA9IG51bGw7XHJcbiAgZm9yICh2YXIgYXR0cmlidXRlTmFtZSBpbiBhdHRyaWJ1dGVzKSB7XHJcbiAgICBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdO1xyXG4gICAgaWYgKGF0dHJpYnV0ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XHJcbiAgICAgIGlmIChqc3hFdmVudFByb3BlcnR5LnRlc3QoYXR0cmlidXRlTmFtZSkpIHtcclxuICAgICAgICBhdHRyaWJ1dGVOYW1lID0gYXR0cmlidXRlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGVsZW1lbnRbYXR0cmlidXRlTmFtZV0gPSBhdHRyaWJ1dGU7XHJcbiAgICAgIH0gZWxzZSBhdHRyaWJ1dGUoZWxlbWVudCk7XHJcbiAgICB9IGVsc2UgaWYgKGF0dHJpYnV0ZSBpbnN0YW5jZW9mIE9iamVjdCkge1xyXG4gICAgICAvL3N0eWxlXHJcbiAgICAgIGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGUpXHJcbiAgICAgICAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVba2V5XSA9PT0gXCJmdW5jdGlvblwiKSBhdHRyaWJ1dGVba2V5XShlbGVtZW50KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChmb3JjZVNldEF0dHIgfHwgYXR0cmlidXRlTmFtZS5pbmRleE9mKFwiLVwiKSAhPT0gLTEpXHJcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlKTtcclxuICAgICAgZWxzZSBlbGVtZW50W2F0dHJpYnV0ZU5hbWVdID0gYXR0cmlidXRlO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVFbGVtZW50ID0gKFxyXG4gIHRhZ05hbWU6IHN0cmluZyB8IEZ1bmN0aW9uIHwgU3ltYm9sLFxyXG4gIGF0dHJpYnV0ZXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0sXHJcbiAgLi4uY2hpbGRzOiBhbnlbXVxyXG4pID0+IHtcclxuICBsZXQgZWxlbWVudCA9IG51bGw7XHJcbiAgaWYgKHRhZ05hbWUgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xyXG4gICAgaWYgKGF0dHJpYnV0ZXMgPT09IG51bGwpIGF0dHJpYnV0ZXMgPSB7fTtcclxuICAgIGF0dHJpYnV0ZXNbXCJjaGlsZHJlblwiXSA9IGNoaWxkcztcclxuICAgIGluamVjdENvbnRleHRzKGF0dHJpYnV0ZXMpO1xyXG4gICAgZWxlbWVudCA9ICh0YWdOYW1lIGFzIGFueSkoYXR0cmlidXRlcyk7XHJcbiAgICBpZiAoZWxlbWVudCkgZWxlbWVudFtcIiRwcm9wc1wiXSA9IGF0dHJpYnV0ZXM7XHJcbiAgfSBlbHNlIHtcclxuICAgIGlmICh0YWdOYW1lID09PSBGcmFnbWVudCkge1xyXG4gICAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSBhcyBhbnkpO1xyXG4gICAgICBhdHRyaWJ1dGVzICYmIHNldEVsZW1lbnRBdHRyaWJ1dGVzKGVsZW1lbnQsIGF0dHJpYnV0ZXMsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIGVsZW1lbnRbXCIkcHJvcHNcIl0gPSBhdHRyaWJ1dGVzO1xyXG4gICAgY2hpbGRzICYmIGNoaWxkcy5sZW5ndGggJiYgYWRkQ2hpbGRFbGVtZW50cyhlbGVtZW50LCBjaGlsZHMpO1xyXG4gIH1cclxuICByZXR1cm4gZWxlbWVudDtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVTdmdFbGVtZW50ID0gKFxyXG4gIHRhZ05hbWU6IHN0cmluZyxcclxuICBhdHRyaWJ1dGVzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9LFxyXG4gIC4uLmNoaWxkczogYW55W11cclxuKSA9PiB7XHJcbiAgbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsIHRhZ05hbWUpO1xyXG4gIGlmIChhdHRyaWJ1dGVzKSB7XHJcbiAgICBpZiAoYXR0cmlidXRlcy5jbGFzc05hbWUpIHtcclxuICAgICAgLy8gVE9ETyBjb21waWxlIHRpbWVcclxuICAgICAgYXR0cmlidXRlcy5jbGFzcyA9IGF0dHJpYnV0ZXMuY2xhc3NOYW1lO1xyXG4gICAgICBkZWxldGUgYXR0cmlidXRlcy5jbGFzc05hbWU7XHJcbiAgICB9XHJcbiAgICBzZXRFbGVtZW50QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzLCB0cnVlKTtcclxuICB9XHJcbiAgY2hpbGRzICYmIGNoaWxkcy5sZW5ndGggJiYgYWRkQ2hpbGRFbGVtZW50cyhlbGVtZW50LCBjaGlsZHMpO1xyXG4gIHJldHVybiBlbGVtZW50O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZENoaWxkRWxlbWVudHMgPSAoZWxlbWVudCwgY2hpbGRzKSA9PiB7XHJcbiAgbGV0IHByb3BzID0gbnVsbDtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRzW2ldKSkgYWRkQ2hpbGRFbGVtZW50cyhlbGVtZW50LCBjaGlsZHNbaV0pO1xyXG4gICAgZWxzZSBpZiAoY2hpbGRzW2ldIGluc3RhbmNlb2YgRnVuY3Rpb24pIGNoaWxkc1tpXShlbGVtZW50KTtcclxuICAgIGVsc2Uge1xyXG4gICAgICBpZiAoY2hpbGRzW2ldKSB7XHJcbiAgICAgICAgcHJvcHMgPSBjaGlsZHNbaV1bXCIkcHJvcHNcIl07XHJcbiAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChcclxuICAgICAgICAgIGNoaWxkc1tpXSBpbnN0YW5jZW9mIE5vZGVcclxuICAgICAgICAgICAgPyBjaGlsZHNbaV1cclxuICAgICAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjaGlsZHNbaV0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICBwcm9wcyAmJiBwcm9wcy5kaWRNb3VudCAmJiBwcm9wcy5kaWRNb3VudChlbGVtZW50LCBjaGlsZHNbaV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRleHROb2RlID0gcGFyZW50ID0+IHtcclxuICByZXR1cm4gcGFyZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpKTtcclxufTtcclxuIiwiaW1wb3J0IHsgRkpzeFZhbHVlIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyBFdmVudGVkQXJyYXkgfSBmcm9tIFwiLi9ldmVudGVkLWFycmF5XCI7XG5pbXBvcnQgeyBjb21wdXRlIH0gZnJvbSBcIi4vZlwiO1xuXG5leHBvcnQgY29uc3QgY29uZGl0aW9uYWxFbGVtZW50ID0gKHBhcmVudEVsZW1lbnQsIG9sZEVsZW1lbnQsIG5ld0VsZW1lbnQpID0+IHtcbiAgaWYgKG5ld0VsZW1lbnQgaW5zdGFuY2VvZiBOb2RlID09PSBmYWxzZSlcbiAgICBuZXdFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobmV3RWxlbWVudCB8fCBcIlwiKTtcbiAgaWYgKG9sZEVsZW1lbnQpIHBhcmVudEVsZW1lbnQucmVwbGFjZUNoaWxkKG5ld0VsZW1lbnQsIG9sZEVsZW1lbnQpO1xuICBlbHNlIHBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQobmV3RWxlbWVudCk7XG4gIHJldHVybiBuZXdFbGVtZW50O1xufTtcblxuZXhwb3J0IGNvbnN0IGluc2VydFRvRG9tID0gKHBhcmVudEVsZW1lbnQsIGluZGV4LCBpdGVtRWxlbWVudCkgPT4ge1xuICBpZiAoaXRlbUVsZW1lbnQgaW5zdGFuY2VvZiBGdW5jdGlvbikgaXRlbUVsZW1lbnQocGFyZW50RWxlbWVudCk7XG4gIGVsc2Uge1xuICAgIGlmIChpdGVtRWxlbWVudCBpbnN0YW5jZW9mIE5vZGUgPT09IGZhbHNlKVxuICAgICAgaXRlbUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShpdGVtRWxlbWVudCk7XG4gICAgcGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoaXRlbUVsZW1lbnQsIHBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1tpbmRleF0pO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgYXJyYXlNYXAgPSAoXG4gIGFycjogRkpzeFZhbHVlPGFueVtdPixcbiAgcGFyZW50RG9tOiBIVE1MRWxlbWVudCxcbiAgcmVuZGVyUmV0dXJuOiAoaXRlbTogYW55LCBpZHg/OiBudW1iZXIsIGlzSW5zZXJ0PzogYm9vbGVhbikgPT4gdm9pZFxuKSA9PiB7XG4gIGNvbnN0IG9BcnIgPVxuICAgIGFyci4kdmFsIGluc3RhbmNlb2YgRXZlbnRlZEFycmF5ID8gYXJyLiR2YWwgOiBuZXcgRXZlbnRlZEFycmF5KGFyci4kdmFsKTtcblxuICBvQXJyLm9uKFwiaXRlbWFkZGVkXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICBpbnNlcnRUb0RvbShwYXJlbnREb20sIGUuaW5kZXgsIHJlbmRlclJldHVybihlLml0ZW0sIGUuaW5kZXgpKTtcbiAgfSk7XG5cbiAgb0Fyci5vbihcIml0ZW1zZXRcIiwgZnVuY3Rpb24oZSkge1xuICAgIHBhcmVudERvbS5yZXBsYWNlQ2hpbGQoXG4gICAgICByZW5kZXJSZXR1cm4oZS5pdGVtLCBlLmluZGV4KSBhcyBhbnksXG4gICAgICBwYXJlbnREb20uY2hpbGROb2Rlcy5pdGVtKGUuaW5kZXgpXG4gICAgKTtcbiAgfSk7XG5cbiAgb0Fyci5vbihcIml0ZW1yZW1vdmVkXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICBwYXJlbnREb20ucmVtb3ZlQ2hpbGQocGFyZW50RG9tLmNoaWxkTm9kZXMuaXRlbShlLmluZGV4KSk7XG4gIH0pO1xuICBhcnIob0Fycik7XG5cbiAgY29uc3QgcmVuZGVyQWxsID0gKCkgPT4ge1xuICAgIGlmIChhcnIuJHZhbC5sZW5ndGggPT09IDApIHBhcmVudERvbS50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgZWxzZSB7XG4gICAgICBwYXJlbnREb20udGV4dENvbnRlbnQgPSBcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IHBhcmVudERvbS5jaGlsZEVsZW1lbnRDb3VudDsgaSA8IGFyci4kdmFsLmxlbmd0aDsgaSsrKVxuICAgICAgICBpbnNlcnRUb0RvbShwYXJlbnREb20sIGksIHJlbmRlclJldHVybihhcnIuJHZhbFtpXSwgaSkpO1xuICAgIH1cbiAgfTtcbiAgY29tcHV0ZShyZW5kZXJBbGwsIGFycik7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==