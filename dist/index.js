!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EventedArray=function(e){var t=this,n=[],r={itemadded:[],itemremoved:[],itemset:[]};function i(e){e in t||Object.defineProperty(t,e,{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(t){n[e]=t,o({type:"itemset",index:e,item:t})}})}function o(e){r[e.type].forEach(function(n){n.call(t,e)})}t.on=function(e,t){r[e].push(t)},t.off=function(e,t){for(var n=r[e],i=n.length;--i>=0;)n[i]===t&&n.splice(i,1)},t.push=function(){for(var e,t=0,r=arguments.length;t<r;t++)e=n.length,n.push(arguments[t]),i(e),o({type:"itemadded",index:e,item:arguments[t]});return n.length},t.pop=function(){if(n.length>-1){var e=n.length-1,r=n.pop();return delete t[e],o({type:"itemremoved",index:e,item:r}),r}},t.unshift=function(){for(var e=0,t=arguments.length;e<t;e++)n.splice(e,0,arguments[e]),i(n.length-1),o({type:"itemadded",index:e,item:arguments[e]});for(;e<n.length;e++)o({type:"itemset",index:e,item:n[e]});return n.length},t.shift=function(){if(n.length>-1){var e=n.shift();return delete t[n.length],o({type:"itemremoved",index:0,item:e}),e}},t.splice=function(e,r){var u,s=[];for(e=null==e?0:e<0?n.length+e:e,r=null==r?n.length-e:r>0?r:0;r--;)u=n.splice(e,1)[0],s.push(u),delete t[n.length],o({type:"itemremoved",index:e+s.length-1,item:u});for(var l=2,c=arguments.length;l<c;l++)n.splice(e,0,arguments[l]),i(n.length-1),o({type:"itemadded",index:e,item:arguments[l]}),e++;return s},Object.defineProperty(t,"length",{configurable:!1,enumerable:!1,get:function(){return n.length},set:function(e){var r=Number(e),i=n.length;if(!(r%1==0&&r>=0))throw new RangeError("Invalid array length");return r<i?t.splice(r):r>i&&t.push.apply(t,new Array(r-i)),n.length=r,e}}),Object.defineProperty(t,"innerArray",{configurable:!1,enumerable:!1,get:function(){return n},set:function(e){n=e}}),Object.getOwnPropertyNames(Array.prototype).forEach(function(e){e in t||Object.defineProperty(t,e,{configurable:!1,enumerable:!1,writable:!1,value:Array.prototype[e]})}),t.toJSON=(()=>n),e instanceof Array&&t.push.apply(t,e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.value=((e,t)=>{const n=e=>{Array.isArray(e)?n.$val.innerArray=e:n.$val=e;const t=n.computes;if(t.length)for(var r=0;r<t.length;r++)!t[r].freezed&&t[r](t[r].compute())};return n.$val=e,n.freezed=t,n.computes=[],e instanceof Function&&(n.compute=e),n.toJSON=(()=>n.$val),n}),t.array=(e=>{const n=t.value(new r.EventedArray(e));return n.on=n.$val.on,n.off=n.$val.off,n.toJSON=(()=>n.$val.innerArray),n}),t.on=((e,t,n)=>{e.$val.on(t,n)}),t.off=((e,t,n)=>{e.$val.off(t,n)}),t.compute=((e,...n)=>{for(var r=t.value(e),i=0;i<n.length;i++)n[i].computes.push(r);e()}),t.initCompute=((e,...n)=>{var r=t.value(e()),i=function(){r(e())};i.compute=r;for(var o=0;o<n.length;o++)n[o].computes.push(i);return r}),t.setCompute=((e,n,...r)=>(t.destroy(e),t.initCompute(n,...r))),t.destroy=(e=>{delete e.compute,delete e.computes})},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(1)),r(n(10)),r(n(9)),r(n(8)),r(n(7))},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t),function(e,r){var i,o=n(3);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var u=Object(o.a)(i);t.default=u}.call(this,n(5),n(4)(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2),i=n(6);class o{constructor(e){this.isUnsubscribed=!1,this.handlers=null,this._unsubscribe=null,this.handlers=e,this.isUnsubscribed=!1}next(e){this.handlers.next&&!this.isUnsubscribed&&this.handlers.next(e)}error(e){this.isUnsubscribed||(this.handlers.error&&this.handlers.error(e),this.unsubscribe())}complete(){this.isUnsubscribed||(this.handlers.complete&&this.handlers.complete(),this.unsubscribe())}unsubscribe(){this.isUnsubscribed=!0,this._unsubscribe&&this._unsubscribe()}}t.toObservable=(e=>new class{constructor(e){this._subscribe=null,this._subscribe=e}subscribe(e){const t=new o(e);return t._unsubscribe=this._subscribe(t),{unsubscribe(){t.unsubscribe()}}}[i.default](){return this}}(t=>{var n=r.value(()=>{t.next(e.$val)});e.computes.push(n)}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r={};t.startContext=((e,t)=>{r[e]||(r[e]=[]),r[e].push(t)}),t.getContextValue=(e=>{if(r[e])return r[e][r[e].length-1]}),t.endContext=(e=>{r[e].pop()}),t.Context=(e=>null)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=/^on[A-Z]/;t.Fragment=Symbol("fjsx.Fragment");const i=(e,t,n)=>{let i=null;for(var o in t)if((i=t[o])instanceof Function)r.test(o)?e[o=o.toLowerCase()]=i:i(e);else if(i instanceof Object)for(var u in i)"function"==typeof i[u]&&i[u](e);else n||-1!==o.indexOf("-")?e.setAttribute(o,i):e[o]=i};t.createElement=((e,n,...r)=>{let o=null;return e instanceof Function?(null===n&&(n={}),n.children=r,(o=e(n))&&(o.$props=n)):(e===t.Fragment?o=document.createDocumentFragment():(o=document.createElement(e),n&&i(o,n,!1)),o.$props=n,r&&r.length&&t.addChildElements(o,r)),o}),t.createSvgElement=((e,n,...r)=>{let o=document.createElementNS("http://www.w3.org/2000/svg",e);return n&&i(o,n,!0),r&&r.length&&t.addChildElements(o,r),o}),t.addChildElements=((e,n)=>{let r=null;for(var i=0;i<n.length;i++)Array.isArray(n[i])?t.addChildElements(e,n[i]):n[i]instanceof Function?n[i](e):n[i]&&(r=n[i].$props,e.appendChild(n[i]instanceof Node?n[i]:document.createTextNode(n[i])),r&&r.didMount&&r.didMount(e,n[i]))}),t.createTextNode=(e=>e.appendChild(document.createTextNode("")))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),i=n(1);t.conditionalElement=((e,t,n)=>(n instanceof Node==!1&&(n=document.createTextNode(n||"")),t?e.replaceChild(n,t):e.appendChild(n),n)),t.insertToDom=((e,t,n)=>{n instanceof Function?n(e):(n instanceof Node==!1&&(n=document.createTextNode(n)),e.insertBefore(n,e.childNodes[t]))}),t.arrayMap=((e,n,o)=>{const u=e.$val instanceof r.EventedArray?e.$val:new r.EventedArray(e.$val);u.on("itemadded",function(e){t.insertToDom(n,e.index,o(e.item,e.index))}),u.on("itemset",function(e){n.replaceChild(o(e.item,e.index),n.childNodes.item(e.index))}),u.on("itemremoved",function(e){n.removeChild(n.childNodes.item(e.index))}),e(u);i.compute(()=>{if(0===e.$val.length)n.textContent="";else{n.textContent="";for(var r=n.childElementCount;r<e.$val.length;r++)t.insertToDom(n,r,o(e.$val[r],r))}},e)})}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,