!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EventedArray=function(e){var t=this,n=[],r={itemadded:[],itemremoved:[],itemset:[]};function i(e){e in t||Object.defineProperty(t,e,{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(t){n[e]=t,o({type:"itemset",index:e,item:t})}})}function o(e){r[e.type].forEach(function(n){n.call(t,e)})}t.on=function(e,t){r[e].push(t)},t.off=function(e,t){for(var n=r[e],i=n.length;--i>=0;)n[i]===t&&n.splice(i,1)},t.push=function(){for(var e,t=0,r=arguments.length;t<r;t++)e=n.length,n.push(arguments[t]),i(e),o({type:"itemadded",index:e,item:arguments[t]});return n.length},t.pop=function(){if(n.length>-1){var e=n.length-1,r=n.pop();return delete t[e],o({type:"itemremoved",index:e,item:r}),r}},t.unshift=function(){for(var e=0,t=arguments.length;e<t;e++)n.splice(e,0,arguments[e]),i(n.length-1),o({type:"itemadded",index:e,item:arguments[e]});for(;e<n.length;e++)o({type:"itemset",index:e,item:n[e]});return n.length},t.shift=function(){if(n.length>-1){var e=n.shift();return delete t[n.length],o({type:"itemremoved",index:0,item:e}),e}},t.splice=function(e,r){var u,s=[];for(e=null==e?0:e<0?n.length+e:e,r=null==r?n.length-e:r>0?r:0;r--;)u=n.splice(e,1)[0],s.push(u),delete t[n.length],o({type:"itemremoved",index:e+s.length-1,item:u});for(var l=2,c=arguments.length;l<c;l++)n.splice(e,0,arguments[l]),i(n.length-1),o({type:"itemadded",index:e,item:arguments[l]}),e++;return s},Object.defineProperty(t,"length",{configurable:!1,enumerable:!1,get:function(){return n.length},set:function(e){var r=Number(e),i=n.length;if(!(r%1==0&&r>=0))throw new RangeError("Invalid array length");return r<i?t.splice(r):r>i&&t.push.apply(t,new Array(r-i)),n.length=r,e}}),Object.defineProperty(t,"innerArray",{configurable:!1,enumerable:!1,get:function(){return n},set:function(e){n=e}}),Object.getOwnPropertyNames(Array.prototype).forEach(function(e){e in t||Object.defineProperty(t,e,{configurable:!1,enumerable:!1,writable:!1,value:Array.prototype[e]})}),t.toJSON=(()=>n),e instanceof Array&&t.push.apply(t,e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.value=((e,t)=>{const n=e=>{Array.isArray(e)?n.$val.innerArray=e:n.$val=e;const t=n.computes;if(t.length)for(var r=0;r<t.length;r++)!t[r].freezed&&t[r](t[r].compute())};return n.$val=e,n.freezed=t,n.computes=[],e instanceof Function&&(n.compute=e),n.toJSON=(()=>n.$val),n}),t.array=(e=>{const n=t.value(new r.EventedArray(e));return n.on=n.$val.on,n.off=n.$val.off,n.toJSON=(()=>n.$val.innerArray),n}),t.on=((e,t,n)=>{e.$val.on(t,n)}),t.off=((e,t,n)=>{e.$val.off(t,n)}),t.compute=((e,...n)=>{for(var r=t.value(e),i=0;i<n.length;i++)n[i].computes.push(r);e()}),t.initCompute=((e,...n)=>{var r=t.value(e()),i=function(){r(e())};i.compute=r;for(var o=0;o<n.length;o++)n[o].computes.push(i);return r}),t.setCompute=((e,n,...r)=>(t.destroy(e),t.initCompute(n,...r))),t.destroy=(e=>{delete e.compute,delete e.computes})},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(1)),r(n(11)),r(n(10)),r(n(9)),r(n(8)),r(n(4))},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setDefaults=((e,t)=>{for(var n in t)void 0===e[n]&&(e[n]=t[n])})},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t),function(e,r){var i,o=n(3);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var u=Object(o.a)(i);t.default=u}.call(this,n(6),n(5)(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2),i=n(7);class o{constructor(e){this.isUnsubscribed=!1,this.handlers=null,this._unsubscribe=null,this.handlers=e,this.isUnsubscribed=!1}next(e){this.handlers.next&&!this.isUnsubscribed&&this.handlers.next(e)}error(e){this.isUnsubscribed||(this.handlers.error&&this.handlers.error(e),this.unsubscribe())}complete(){this.isUnsubscribed||(this.handlers.complete&&this.handlers.complete(),this.unsubscribe())}unsubscribe(){this.isUnsubscribed=!0,this._unsubscribe&&this._unsubscribe()}}t.toObservable=(e=>new class{constructor(e){this._subscribe=null,this._subscribe=e}subscribe(e){const t=new o(e);return t._unsubscribe=this._subscribe(t),{unsubscribe(){t.unsubscribe()}}}[i.default](){return this}}(t=>{var n=r.value(()=>{t.next(e.$val)});e.computes.push(n)}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r={};t.startContext=((e,t)=>{r[e]||(r[e]=[]),r[e].push(t)}),t.getContextValue=(e=>{if(r[e])return r[e][r[e].length-1]}),t.endContext=(e=>{r[e].pop()}),t.Context=(e=>null)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=/^on[A-Z]/;t.Fragment=Symbol("fjsx.Fragment");const i=(e,t,n)=>{let i=null;for(var o in t)if((i=t[o])instanceof Function)r.test(o)?e[o=o.toLowerCase()]=i:i(e);else if(i instanceof Object)for(var u in i)"function"==typeof i[u]&&i[u](e);else n||-1!==o.indexOf("-")?e.setAttribute(o,i):e[o]=i};t.createElement=((e,n,...r)=>{let o=null;return e instanceof Function?(null===n&&(n={}),n.children=r,(o=e(n))&&(o.$props=n)):(e===t.Fragment?o=document.createDocumentFragment():(o=document.createElement(e),n&&i(o,n,!1)),o.$props=n,r&&r.length&&t.addChildElements(o,r)),o}),t.createSvgElement=((e,n,...r)=>{let o=document.createElementNS("http://www.w3.org/2000/svg",e);return n&&i(o,n,!0),r&&r.length&&t.addChildElements(o,r),o}),t.addChildElements=((e,n)=>{let r=null;for(var i=0;i<n.length;i++)Array.isArray(n[i])?t.addChildElements(e,n[i]):n[i]instanceof Function?n[i](e):n[i]&&(r=n[i].$props,e.appendChild(n[i]instanceof Node?n[i]:document.createTextNode(n[i])),r&&r.didMount&&r.didMount(e,n[i]))}),t.createTextNode=(e=>e.appendChild(document.createTextNode("")))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),i=n(1);t.conditionalElement=((e,t,n)=>(n instanceof Node==!1&&(n=document.createTextNode(n||"")),t?e.replaceChild(n,t):e.appendChild(n),n)),t.insertToDom=((e,t,n)=>{n instanceof Function?n(e):(n instanceof Node==!1&&(n=document.createTextNode(n)),e.insertBefore(n,e.childNodes[t]))}),t.arrayMap=((e,n,o)=>{const u=e.$val instanceof r.EventedArray?e.$val:new r.EventedArray(e.$val);u.on("itemadded",function(e){t.insertToDom(n,e.index,o(e.item,e.index))}),u.on("itemset",function(e){n.replaceChild(o(e.item,e.index),n.childNodes.item(e.index))}),u.on("itemremoved",function(e){n.removeChild(n.childNodes.item(e.index))}),e(u);i.compute(()=>{if(0===e.$val.length)n.textContent="";else{n.textContent="";for(var r=n.childElementCount;r<e.$val.length;r++)t.insertToDom(n,r,o(e.$val[r],r))}},e)})}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbGliL2V2ZW50ZWQtYXJyYXkudHMiLCJ3ZWJwYWNrOi8vLy4vbGliL2YudHMiLCJ3ZWJwYWNrOi8vLy4vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL2xpYi91dGlsLnRzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9saWIvb2JzZXJ2YWJsZS50cyIsIndlYnBhY2s6Ly8vLi9saWIvY29udGV4dC50cyIsIndlYnBhY2s6Ly8vLi9saWIvZG9tLXRyZWUudHMiLCJ3ZWJwYWNrOi8vLy4vbGliL2RvbS50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiRXZlbnRlZEFycmF5IiwiaXRlbXMiLCJfc2VsZiIsInRoaXMiLCJfYXJyYXkiLCJfaGFuZGxlcnMiLCJpdGVtYWRkZWQiLCJpdGVtcmVtb3ZlZCIsIml0ZW1zZXQiLCJkZWZpbmVJbmRleFByb3BlcnR5IiwiaW5kZXgiLCJzZXQiLCJ2IiwicmFpc2VFdmVudCIsInR5cGUiLCJpdGVtIiwiZXZlbnQiLCJmb3JFYWNoIiwiaCIsIm9uIiwiZXZlbnROYW1lIiwiaGFuZGxlciIsInB1c2giLCJvZmYiLCJsbiIsImxlbmd0aCIsInNwbGljZSIsImFyZ3VtZW50cyIsInBvcCIsInVuc2hpZnQiLCJzaGlmdCIsImhvd01hbnkiLCJyZW1vdmVkIiwiTnVtYmVyIiwiUmFuZ2VFcnJvciIsImFwcGx5IiwiQXJyYXkiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwid3JpdGFibGUiLCJ0b0pTT04iLCJldmVudGVkX2FycmF5XzEiLCJmcmVlemVkIiwiaW5uZXJGbiIsInZhbCIsImlzQXJyYXkiLCJpbm5lckFycmF5IiwiY29tcHV0ZXMiLCJjb21wdXRlIiwiRnVuY3Rpb24iLCJhcnJheSIsImFyciIsIiR2YWwiLCJjYWxsYmFjayIsImZuIiwiYXJncyIsImluaXRDb21wdXRlIiwiY1ZhbHVlIiwiY21wSW5uZXIiLCJzZXRDb21wdXRlIiwicHJldiIsImRlc3Ryb3kiLCJfX2V4cG9ydCIsInN5bWJvbE9ic2VydmFibGVQb255ZmlsbCIsInJvb3QiLCJyZXN1bHQiLCJTeW1ib2wiLCJvYnNlcnZhYmxlIiwic2V0RGVmYXVsdHMiLCJvYmoiLCJkZWZhdWx0cyIsImtleSIsInVuZGVmaW5lZCIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwiY3JlYXRlIiwiY2hpbGRyZW4iLCJnIiwiZXZhbCIsImUiLCJ3aW5kb3ciLCJfcG9ueWZpbGxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInNlbGYiLCJnbG9iYWwiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiX18xIiwic3ltYm9sX29ic2VydmFibGVfMSIsIk9ic2VydmVyIiwiW29iamVjdCBPYmplY3RdIiwiaGFuZGxlcnMiLCJpc1Vuc3Vic2NyaWJlZCIsIl91bnN1YnNjcmliZSIsIm5leHQiLCJlcnJvciIsInVuc3Vic2NyaWJlIiwiY29tcGxldGUiLCJ0b09ic2VydmFibGUiLCJkYXRhIiwic3Vic2NyaWJlIiwiX3N1YnNjcmliZSIsIm9icyIsIm9ic2VydmVyIiwiZGVmYXVsdCIsImFwcENvbnRleHQiLCJzdGFydENvbnRleHQiLCJnZXRDb250ZXh0VmFsdWUiLCJlbmRDb250ZXh0IiwiQ29udGV4dCIsInByb3BzIiwianN4RXZlbnRQcm9wZXJ0eSIsIkZyYWdtZW50Iiwic2V0RWxlbWVudEF0dHJpYnV0ZXMiLCJlbGVtZW50IiwiYXR0cmlidXRlcyIsImZvcmNlU2V0QXR0ciIsImF0dHJpYnV0ZSIsImF0dHJpYnV0ZU5hbWUiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwic2V0QXR0cmlidXRlIiwiY3JlYXRlRWxlbWVudCIsInRhZ05hbWUiLCJjaGlsZHMiLCJkb2N1bWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJhZGRDaGlsZEVsZW1lbnRzIiwiY3JlYXRlU3ZnRWxlbWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImFwcGVuZENoaWxkIiwiTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiZGlkTW91bnQiLCJwYXJlbnQiLCJmXzEiLCJjb25kaXRpb25hbEVsZW1lbnQiLCJwYXJlbnRFbGVtZW50Iiwib2xkRWxlbWVudCIsIm5ld0VsZW1lbnQiLCJyZXBsYWNlQ2hpbGQiLCJpbnNlcnRUb0RvbSIsIml0ZW1FbGVtZW50IiwiaW5zZXJ0QmVmb3JlIiwiY2hpbGROb2RlcyIsImFycmF5TWFwIiwicGFyZW50RG9tIiwicmVuZGVyUmV0dXJuIiwib0FyciIsInJlbW92ZUNoaWxkIiwidGV4dENvbnRlbnQiLCJjaGlsZEVsZW1lbnRDb3VudCJdLCJtYXBwaW5ncyI6IjZEQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFB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RyxZQUFhLFNBQVMyRCxHQUM1QnpHLEVBQUFzSyxZQUFZSyxFQUFXbEUsRUFBRXBFLE1BQU91SSxFQUFhbkUsRUFBRS9ELEtBQU0rRCxFQUFFcEUsVUFHekR3SSxFQUFLL0gsR0FBRyxVQUFXLFNBQVMyRCxHQUMxQmtFLEVBQVVOLGFBQ1JPLEVBQWFuRSxFQUFFL0QsS0FBTStELEVBQUVwRSxPQUN2QnNJLEVBQVVGLFdBQVcvSCxLQUFLK0QsRUFBRXBFLFVBSWhDd0ksRUFBSy9ILEdBQUcsY0FBZSxTQUFTMkQsR0FDOUJrRSxFQUFVRyxZQUFZSCxFQUFVRixXQUFXL0gsS0FBSytELEVBQUVwRSxVQUVwRHdDLEVBQUlnRyxHQVVKYixFQUFBdEYsUUFSa0IsS0FDaEIsR0FBd0IsSUFBcEJHLEVBQUlDLEtBQUsxQixPQUFjdUgsRUFBVUksWUFBYyxPQUM5QyxDQUNISixFQUFVSSxZQUFjLEdBQ3hCLElBQUssSUFBSTdLLEVBQUl5SyxFQUFVSyxrQkFBbUI5SyxFQUFJMkUsRUFBSUMsS0FBSzFCLE9BQVFsRCxJQUM3REYsRUFBQXNLLFlBQVlLLEVBQVd6SyxFQUFHMEssRUFBYS9GLEVBQUlDLEtBQUs1RSxHQUFJQSxNQUd2QzJFIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyKTtcbiIsIi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzUxMDAzNzYvaG93LXRvLXdhdGNoLWZvci1hcnJheS1jaGFuZ2VzXG5leHBvcnQgZnVuY3Rpb24gRXZlbnRlZEFycmF5KGl0ZW1zKSB7XG4gIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgX2FycmF5ID0gW10sXG4gICAgX2hhbmRsZXJzID0ge1xuICAgICAgaXRlbWFkZGVkOiBbXSxcbiAgICAgIGl0ZW1yZW1vdmVkOiBbXSxcbiAgICAgIGl0ZW1zZXQ6IFtdXG4gICAgfTtcblxuICBmdW5jdGlvbiBkZWZpbmVJbmRleFByb3BlcnR5KGluZGV4KSB7XG4gICAgaWYgKCEoaW5kZXggaW4gX3NlbGYpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3NlbGYsIGluZGV4LCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gX2FycmF5W2luZGV4XTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgX2FycmF5W2luZGV4XSA9IHY7XG4gICAgICAgICAgcmFpc2VFdmVudCh7XG4gICAgICAgICAgICB0eXBlOiBcIml0ZW1zZXRcIixcbiAgICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICAgIGl0ZW06IHZcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmFpc2VFdmVudChldmVudCkge1xuICAgIF9oYW5kbGVyc1tldmVudC50eXBlXS5mb3JFYWNoKGZ1bmN0aW9uKGgpIHtcbiAgICAgIGguY2FsbChfc2VsZiwgZXZlbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgX3NlbGYub24gPSBmdW5jdGlvbihldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICBfaGFuZGxlcnNbZXZlbnROYW1lXS5wdXNoKGhhbmRsZXIpO1xuICB9O1xuXG4gIF9zZWxmLm9mZiA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgIHZhciBoID0gX2hhbmRsZXJzW2V2ZW50TmFtZV07XG4gICAgdmFyIGxuID0gaC5sZW5ndGg7XG4gICAgd2hpbGUgKC0tbG4gPj0gMCkge1xuICAgICAgaWYgKGhbbG5dID09PSBoYW5kbGVyKSB7XG4gICAgICAgIGguc3BsaWNlKGxuLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3NlbGYucHVzaCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbmRleDtcbiAgICBmb3IgKHZhciBpID0gMCwgbG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbG47IGkrKykge1xuICAgICAgaW5kZXggPSBfYXJyYXkubGVuZ3RoO1xuICAgICAgX2FycmF5LnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICAgIGRlZmluZUluZGV4UHJvcGVydHkoaW5kZXgpO1xuICAgICAgcmFpc2VFdmVudCh7XG4gICAgICAgIHR5cGU6IFwiaXRlbWFkZGVkXCIsXG4gICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgaXRlbTogYXJndW1lbnRzW2ldXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIF9hcnJheS5sZW5ndGg7XG4gIH07XG5cbiAgX3NlbGYucG9wID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKF9hcnJheS5sZW5ndGggPiAtMSkge1xuICAgICAgdmFyIGluZGV4ID0gX2FycmF5Lmxlbmd0aCAtIDEsXG4gICAgICAgIGl0ZW0gPSBfYXJyYXkucG9wKCk7XG4gICAgICBkZWxldGUgX3NlbGZbaW5kZXhdO1xuICAgICAgcmFpc2VFdmVudCh7XG4gICAgICAgIHR5cGU6IFwiaXRlbXJlbW92ZWRcIixcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICBpdGVtOiBpdGVtXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgfTtcblxuICBfc2VsZi51bnNoaWZ0ID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxuOyBpKyspIHtcbiAgICAgIF9hcnJheS5zcGxpY2UoaSwgMCwgYXJndW1lbnRzW2ldKTtcbiAgICAgIGRlZmluZUluZGV4UHJvcGVydHkoX2FycmF5Lmxlbmd0aCAtIDEpO1xuICAgICAgcmFpc2VFdmVudCh7XG4gICAgICAgIHR5cGU6IFwiaXRlbWFkZGVkXCIsXG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgICBpdGVtOiBhcmd1bWVudHNbaV1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IF9hcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgcmFpc2VFdmVudCh7XG4gICAgICAgIHR5cGU6IFwiaXRlbXNldFwiLFxuICAgICAgICBpbmRleDogaSxcbiAgICAgICAgaXRlbTogX2FycmF5W2ldXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIF9hcnJheS5sZW5ndGg7XG4gIH07XG5cbiAgX3NlbGYuc2hpZnQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoX2FycmF5Lmxlbmd0aCA+IC0xKSB7XG4gICAgICB2YXIgaXRlbSA9IF9hcnJheS5zaGlmdCgpO1xuICAgICAgZGVsZXRlIF9zZWxmW19hcnJheS5sZW5ndGhdO1xuICAgICAgcmFpc2VFdmVudCh7XG4gICAgICAgIHR5cGU6IFwiaXRlbXJlbW92ZWRcIixcbiAgICAgICAgaW5kZXg6IDAsXG4gICAgICAgIGl0ZW06IGl0ZW1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICB9O1xuXG4gIF9zZWxmLnNwbGljZSA9IGZ1bmN0aW9uKGluZGV4LCBob3dNYW55IC8qLCBlbGVtZW50MSwgZWxlbWVudDIsIC4uLiAqLykge1xuICAgIHZhciByZW1vdmVkID0gW10sXG4gICAgICBpdGVtLFxuICAgICAgcG9zO1xuXG4gICAgaW5kZXggPSBpbmRleCA9PSBudWxsID8gMCA6IGluZGV4IDwgMCA/IF9hcnJheS5sZW5ndGggKyBpbmRleCA6IGluZGV4O1xuXG4gICAgaG93TWFueSA9XG4gICAgICBob3dNYW55ID09IG51bGwgPyBfYXJyYXkubGVuZ3RoIC0gaW5kZXggOiBob3dNYW55ID4gMCA/IGhvd01hbnkgOiAwO1xuXG4gICAgd2hpbGUgKGhvd01hbnktLSkge1xuICAgICAgaXRlbSA9IF9hcnJheS5zcGxpY2UoaW5kZXgsIDEpWzBdO1xuICAgICAgcmVtb3ZlZC5wdXNoKGl0ZW0pO1xuICAgICAgZGVsZXRlIF9zZWxmW19hcnJheS5sZW5ndGhdO1xuICAgICAgcmFpc2VFdmVudCh7XG4gICAgICAgIHR5cGU6IFwiaXRlbXJlbW92ZWRcIixcbiAgICAgICAgaW5kZXg6IGluZGV4ICsgcmVtb3ZlZC5sZW5ndGggLSAxLFxuICAgICAgICBpdGVtOiBpdGVtXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMiwgbG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbG47IGkrKykge1xuICAgICAgX2FycmF5LnNwbGljZShpbmRleCwgMCwgYXJndW1lbnRzW2ldKTtcbiAgICAgIGRlZmluZUluZGV4UHJvcGVydHkoX2FycmF5Lmxlbmd0aCAtIDEpO1xuICAgICAgcmFpc2VFdmVudCh7XG4gICAgICAgIHR5cGU6IFwiaXRlbWFkZGVkXCIsXG4gICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgaXRlbTogYXJndW1lbnRzW2ldXG4gICAgICB9KTtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbW92ZWQ7XG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9zZWxmLCBcImxlbmd0aFwiLCB7XG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF9hcnJheS5sZW5ndGg7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgbiA9IE51bWJlcih2YWx1ZSk7XG4gICAgICB2YXIgbGVuZ3RoID0gX2FycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChuICUgMSA9PT0gMCAmJiBuID49IDApIHtcbiAgICAgICAgaWYgKG4gPCBsZW5ndGgpIHtcbiAgICAgICAgICBfc2VsZi5zcGxpY2Uobik7XG4gICAgICAgIH0gZWxzZSBpZiAobiA+IGxlbmd0aCkge1xuICAgICAgICAgIF9zZWxmLnB1c2guYXBwbHkoX3NlbGYsIG5ldyBBcnJheShuIC0gbGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBhcnJheSBsZW5ndGhcIik7XG4gICAgICB9XG4gICAgICBfYXJyYXkubGVuZ3RoID0gbjtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfc2VsZiwgXCJpbm5lckFycmF5XCIsIHtcbiAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gX2FycmF5O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbih2KSB7XG4gICAgICAvLyBfc2VsZi5wdXNoLmFwcGx5KF9zZWxmLCB2KTsgLy8gcmVuZGVyQWxsXG4gICAgICBfYXJyYXkgPSB2O1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoQXJyYXkucHJvdG90eXBlKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAoIShuYW1lIGluIF9zZWxmKSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9zZWxmLCBuYW1lLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBBcnJheS5wcm90b3R5cGVbbmFtZV1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgX3NlbGYudG9KU09OID0gKCkgPT4ge1xuICAgIHJldHVybiBfYXJyYXk7XG4gIH07XG5cbiAgaWYgKGl0ZW1zIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBfc2VsZi5wdXNoLmFwcGx5KF9zZWxmLCBpdGVtcyk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEV2ZW50ZWRBcnJheSB9IGZyb20gXCIuL2V2ZW50ZWQtYXJyYXlcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRkpzeFZhbHVlPFQ+IHtcclxuICAodmFsOiBUKTogdm9pZDtcclxuICByZWFkb25seSAkdmFsOiBUO1xyXG4gIGZyZWV6ZWQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEZqc3hBcnJheUV2ZW50VHlwZSA9IFwiaXRlbWFkZGVkXCIgfCBcIml0ZW1zZXRcIiB8IFwiaXRlbXJlbW92ZWRcIjtcclxuXHJcbmV4cG9ydCBjb25zdCB2YWx1ZSA9IDxUPih2YWx1ZTogVCwgZnJlZXplZD86IGJvb2xlYW4pOiBGSnN4VmFsdWU8VD4gPT4ge1xyXG4gIGNvbnN0IGlubmVyRm46IGFueSA9ICh2YWw/KSA9PiB7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XHJcbiAgICAgIC8vIFRPRE8gaHR0cHM6Ly9naXRodWIuY29tL1dlYlJlZmxlY3Rpb24vbWFqaW5idXVcclxuICAgICAgaW5uZXJGbltcIiR2YWxcIl0uaW5uZXJBcnJheSA9IHZhbDtcclxuICAgIH0gZWxzZSBpbm5lckZuW1wiJHZhbFwiXSA9IHZhbDtcclxuICAgIGNvbnN0IGNvbXB1dGVzID0gaW5uZXJGbltcImNvbXB1dGVzXCJdO1xyXG4gICAgaWYgKGNvbXB1dGVzLmxlbmd0aClcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wdXRlcy5sZW5ndGg7IGkrKylcclxuICAgICAgICAhY29tcHV0ZXNbaV1bXCJmcmVlemVkXCJdICYmIGNvbXB1dGVzW2ldKGNvbXB1dGVzW2ldLmNvbXB1dGUoKSk7XHJcbiAgfTtcclxuICBpbm5lckZuW1wiJHZhbFwiXSA9IHZhbHVlO1xyXG4gIGlubmVyRm5bXCJmcmVlemVkXCJdID0gZnJlZXplZDtcclxuXHJcbiAgaW5uZXJGbltcImNvbXB1dGVzXCJdID0gW107XHJcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb24pIGlubmVyRm5bXCJjb21wdXRlXCJdID0gdmFsdWU7XHJcbiAgaW5uZXJGbi50b0pTT04gPSAoKSA9PiBpbm5lckZuW1wiJHZhbFwiXTtcclxuICByZXR1cm4gaW5uZXJGbjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBhcnJheSA9IDxUPihcclxuICBpdGVtczogVFtdXHJcbik6IHtcclxuICBvbj86IChcclxuICAgIHR5cGU6IEZqc3hBcnJheUV2ZW50VHlwZSxcclxuICAgIGNhbGxiYWNrOiAoZTogeyBpdGVtOiBUOyBpbmRleDogbnVtYmVyIH0pID0+IHZvaWRcclxuICApID0+IHZvaWQ7XHJcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcj86ICh0eXBlOiBGanN4QXJyYXlFdmVudFR5cGUpID0+IHZvaWQ7XHJcbiAgJHZhbDogVFtdO1xyXG59ID0+IHtcclxuICBjb25zdCBhcnIgPSB2YWx1ZShuZXcgRXZlbnRlZEFycmF5KGl0ZW1zKSkgYXMgYW55O1xyXG4gIGFyci5vbiA9IGFyci4kdmFsLm9uO1xyXG4gIGFyci5vZmYgPSBhcnIuJHZhbC5vZmY7XHJcbiAgYXJyLnRvSlNPTiA9ICgpID0+IGFyci4kdmFsLmlubmVyQXJyYXk7XHJcblxyXG4gIHJldHVybiBhcnI7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgb24gPSAoXHJcbiAgYXJyOiBhbnlbXSxcclxuICB0eXBlOiBGanN4QXJyYXlFdmVudFR5cGUsXHJcbiAgY2FsbGJhY2s6IChlOiB7IGl0ZW06IGFueTsgaW5kZXg6IG51bWJlciB9KSA9PiB2b2lkXHJcbikgPT4ge1xyXG4gIGFycltcIiR2YWxcIl0ub24odHlwZSwgY2FsbGJhY2spO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IG9mZiA9IChcclxuICBhcnI6IGFueVtdLFxyXG4gIHR5cGU6IEZqc3hBcnJheUV2ZW50VHlwZSxcclxuICBjYWxsYmFjazogKGU6IHsgaXRlbTogYW55OyBpbmRleDogbnVtYmVyIH0pID0+IHZvaWRcclxuKSA9PiB7XHJcbiAgYXJyW1wiJHZhbFwiXS5vZmYodHlwZSwgY2FsbGJhY2spO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbXB1dGUgPSAoZm46ICgpID0+IHZvaWQsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XHJcbiAgdmFyIGNvbXB1dGUgPSB2YWx1ZShmbik7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSBhcmdzW2ldW1wiY29tcHV0ZXNcIl0ucHVzaChjb21wdXRlKTtcclxuICBmbigpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGluaXRDb21wdXRlID0gKGZuOiAoKSA9PiBhbnksIC4uLmFyZ3M6IGFueVtdKSA9PiB7XHJcbiAgdmFyIGNWYWx1ZSA9IHZhbHVlKGZuKCkpO1xyXG4gIHZhciBjbXBJbm5lciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgY1ZhbHVlKGZuKCkpO1xyXG4gIH07XHJcbiAgY21wSW5uZXJbXCJjb21wdXRlXCJdID0gY1ZhbHVlO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykgYXJnc1tpXVtcImNvbXB1dGVzXCJdLnB1c2goY21wSW5uZXIpO1xyXG5cclxuICByZXR1cm4gY1ZhbHVlO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHNldENvbXB1dGUgPSAocHJldjogYW55LCBmbjogKCkgPT4gdm9pZCwgLi4uYXJnczogYW55W10pID0+IHtcclxuICBkZXN0cm95KHByZXYpO1xyXG4gIHJldHVybiBpbml0Q29tcHV0ZShmbiwgLi4uYXJncyk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZGVzdHJveSA9IChpdGVtOiBhbnkpID0+IHtcclxuICBkZWxldGUgaXRlbVtcImNvbXB1dGVcIl07XHJcbiAgZGVsZXRlIGl0ZW1bXCJjb21wdXRlc1wiXTtcclxufTtcclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIkpTWC5kLnRzXCIgLz5cblxuZXhwb3J0ICogZnJvbSBcIi4vbGliL2ZcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpYi9kb21cIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpYi9kb20tdHJlZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbGliL2NvbnRleHRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpYi9vYnNlcnZhYmxlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9saWIvdXRpbFwiO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsImltcG9ydCB7IHZhbHVlIH0gZnJvbSBcIi4vZlwiO1xuXG5leHBvcnQgY29uc3Qgc2V0RGVmYXVsdHMgPSA8VD4oXG4gIG9iajogVCxcbiAgZGVmYXVsdHM6IHsgW2tleSBpbiBrZXlvZiBUXT86IGFueSB9XG4pID0+IHtcbiAgZm9yICh2YXIga2V5IGluIGRlZmF1bHRzKSB7XG4gICAgaWYgKG9ialtrZXldID09PSB1bmRlZmluZWQpIG9ialtrZXldID0gZGVmYXVsdHNba2V5XTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcclxuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG4iLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoIChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiaW1wb3J0IHsgRkpzeFZhbHVlLCB2YWx1ZSB9IGZyb20gXCIuLlwiO1xuaW1wb3J0ICQkc3ltYm9sT2JzZXJ2YWJsZSBmcm9tIFwic3ltYm9sLW9ic2VydmFibGVcIjtcblxuLy8gaHR0cHM6Ly9tZWRpdW0uY29tL0Bma251c3NlbC9hLXNpbXBsZS1vYnNlcnZhYmxlLWltcGxlbWVudGF0aW9uLWM5YzgwOWM4OWM2OVxuXG5jbGFzcyBPYnNlcnZlciB7XG4gIGlzVW5zdWJzY3JpYmVkID0gZmFsc2U7XG4gIGhhbmRsZXJzOiBQYXJ0aWFsPE9ic2VydmVyPiA9IG51bGw7XG4gIF91bnN1YnNjcmliZSA9IG51bGw7XG4gIGNvbnN0cnVjdG9yKGhhbmRsZXJzOiBQYXJ0aWFsPE9ic2VydmVyPikge1xuICAgIHRoaXMuaGFuZGxlcnMgPSBoYW5kbGVyczsgLy8gbmV4dCwgZXJyb3IgYW5kIGNvbXBsZXRlIGxvZ2ljXG4gICAgdGhpcy5pc1Vuc3Vic2NyaWJlZCA9IGZhbHNlO1xuICB9XG5cbiAgbmV4dCh2YWx1ZSkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzLm5leHQgJiYgIXRoaXMuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgIHRoaXMuaGFuZGxlcnMubmV4dCh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgZXJyb3IoZXJyb3IpIHtcbiAgICBpZiAoIXRoaXMuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgIGlmICh0aGlzLmhhbmRsZXJzLmVycm9yKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMuZXJyb3IoZXJyb3IpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG5cbiAgY29tcGxldGUoKSB7XG4gICAgaWYgKCF0aGlzLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICBpZiAodGhpcy5oYW5kbGVycy5jb21wbGV0ZSkge1xuICAgICAgICB0aGlzLmhhbmRsZXJzLmNvbXBsZXRlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICB1bnN1YnNjcmliZSgpIHtcbiAgICB0aGlzLmlzVW5zdWJzY3JpYmVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl91bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy5fdW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgT2JzZXJ2YWJsZSB7XG4gIF9zdWJzY3JpYmU6IChvYnNlcnZlcjogT2JzZXJ2ZXIpID0+ICgpID0+IHZvaWQgPSBudWxsO1xuICBjb25zdHJ1Y3RvcihzdWJzY3JpYmUpIHtcbiAgICB0aGlzLl9zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gIH1cblxuICBzdWJzY3JpYmUob2JzOiBQYXJ0aWFsPE9ic2VydmVyPikge1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE9ic2VydmVyKG9icyk7XG5cbiAgICBvYnNlcnZlci5fdW5zdWJzY3JpYmUgPSB0aGlzLl9zdWJzY3JpYmUob2JzZXJ2ZXIpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBvYnNlcnZlci51bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBbJCRzeW1ib2xPYnNlcnZhYmxlXSgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgdG9PYnNlcnZhYmxlID0gPFQ+KGRhdGE6IEZKc3hWYWx1ZTxhbnk+KTogVCA9PiB7XG4gIHJldHVybiBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PiB7XG4gICAgdmFyIGNvbXB1dGUgPSB2YWx1ZSgoKSA9PiB7XG4gICAgICBvYnNlcnZlci5uZXh0KGRhdGEuJHZhbCk7XG4gICAgfSk7XG4gICAgZGF0YVtcImNvbXB1dGVzXCJdLnB1c2goY29tcHV0ZSk7XG4gIH0pIGFzIGFueTtcbn07XG4iLCJjb25zdCBhcHBDb250ZXh0OiB7IFtrZXk6IHN0cmluZ106IGFueVtdIH0gPSB7fTtcblxuZXhwb3J0IGNvbnN0IHN0YXJ0Q29udGV4dCA9IChrZXk6IHN0cmluZywgdmFsdWU6IGFueSkgPT4ge1xuICBpZiAoIWFwcENvbnRleHRba2V5XSkgYXBwQ29udGV4dFtrZXldID0gW107XG4gIGFwcENvbnRleHRba2V5XS5wdXNoKHZhbHVlKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDb250ZXh0VmFsdWUgPSAoa2V5OiBzdHJpbmcpID0+IHtcbiAgaWYgKGFwcENvbnRleHRba2V5XSkgcmV0dXJuIGFwcENvbnRleHRba2V5XVthcHBDb250ZXh0W2tleV0ubGVuZ3RoIC0gMV07XG59O1xuXG5leHBvcnQgY29uc3QgZW5kQ29udGV4dCA9IChrZXk6IHN0cmluZykgPT4ge1xuICBhcHBDb250ZXh0W2tleV0ucG9wKCk7XG59O1xuXG5leHBvcnQgY29uc3QgQ29udGV4dCA9IChwcm9wczogeyBrZXk6IHN0cmluZzsgdmFsdWU6IGFueSB9KSA9PiBudWxsO1xuIiwidmFyIGpzeEV2ZW50UHJvcGVydHkgPSAvXm9uW0EtWl0vO1xyXG5jb25zdCBzdmdOUyA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtcclxuZXhwb3J0IGNvbnN0IEZyYWdtZW50ID0gU3ltYm9sKFwiZmpzeC5GcmFnbWVudFwiKTtcclxuXHJcbmNvbnN0IHNldEVsZW1lbnRBdHRyaWJ1dGVzID0gKFxyXG4gIGVsZW1lbnQ6IEVsZW1lbnQsXHJcbiAgYXR0cmlidXRlcyxcclxuICBmb3JjZVNldEF0dHI6IGJvb2xlYW5cclxuKSA9PiB7XHJcbiAgbGV0IGF0dHJpYnV0ZSA9IG51bGw7XHJcbiAgZm9yICh2YXIgYXR0cmlidXRlTmFtZSBpbiBhdHRyaWJ1dGVzKSB7XHJcbiAgICBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdO1xyXG4gICAgaWYgKGF0dHJpYnV0ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XHJcbiAgICAgIGlmIChqc3hFdmVudFByb3BlcnR5LnRlc3QoYXR0cmlidXRlTmFtZSkpIHtcclxuICAgICAgICBhdHRyaWJ1dGVOYW1lID0gYXR0cmlidXRlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGVsZW1lbnRbYXR0cmlidXRlTmFtZV0gPSBhdHRyaWJ1dGU7XHJcbiAgICAgIH0gZWxzZSBhdHRyaWJ1dGUoZWxlbWVudCk7XHJcbiAgICB9IGVsc2UgaWYgKGF0dHJpYnV0ZSBpbnN0YW5jZW9mIE9iamVjdCkge1xyXG4gICAgICAvL3N0eWxlXHJcbiAgICAgIGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGUpXHJcbiAgICAgICAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVba2V5XSA9PT0gXCJmdW5jdGlvblwiKSBhdHRyaWJ1dGVba2V5XShlbGVtZW50KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChmb3JjZVNldEF0dHIgfHwgYXR0cmlidXRlTmFtZS5pbmRleE9mKFwiLVwiKSAhPT0gLTEpXHJcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlKTtcclxuICAgICAgZWxzZSBlbGVtZW50W2F0dHJpYnV0ZU5hbWVdID0gYXR0cmlidXRlO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVFbGVtZW50ID0gKFxyXG4gIHRhZ05hbWU6IHN0cmluZyB8IEZ1bmN0aW9uIHwgU3ltYm9sLFxyXG4gIGF0dHJpYnV0ZXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0sXHJcbiAgLi4uY2hpbGRzOiBhbnlbXVxyXG4pID0+IHtcclxuICBsZXQgZWxlbWVudCA9IG51bGw7XHJcbiAgaWYgKHRhZ05hbWUgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xyXG4gICAgaWYgKGF0dHJpYnV0ZXMgPT09IG51bGwpIGF0dHJpYnV0ZXMgPSB7fTtcclxuICAgIGF0dHJpYnV0ZXNbXCJjaGlsZHJlblwiXSA9IGNoaWxkcztcclxuICAgIGVsZW1lbnQgPSAodGFnTmFtZSBhcyBhbnkpKGF0dHJpYnV0ZXMpO1xyXG4gICAgaWYgKGVsZW1lbnQpIGVsZW1lbnRbXCIkcHJvcHNcIl0gPSBhdHRyaWJ1dGVzO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAodGFnTmFtZSA9PT0gRnJhZ21lbnQpIHtcclxuICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUgYXMgYW55KTtcclxuICAgICAgYXR0cmlidXRlcyAmJiBzZXRFbGVtZW50QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBlbGVtZW50W1wiJHByb3BzXCJdID0gYXR0cmlidXRlcztcclxuICAgIGNoaWxkcyAmJiBjaGlsZHMubGVuZ3RoICYmIGFkZENoaWxkRWxlbWVudHMoZWxlbWVudCwgY2hpbGRzKTtcclxuICB9XHJcbiAgcmV0dXJuIGVsZW1lbnQ7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlU3ZnRWxlbWVudCA9IChcclxuICB0YWdOYW1lOiBzdHJpbmcsXHJcbiAgYXR0cmlidXRlczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSxcclxuICAuLi5jaGlsZHM6IGFueVtdXHJcbikgPT4ge1xyXG4gIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCB0YWdOYW1lKTtcclxuICBhdHRyaWJ1dGVzICYmIHNldEVsZW1lbnRBdHRyaWJ1dGVzKGVsZW1lbnQsIGF0dHJpYnV0ZXMsIHRydWUpO1xyXG4gIGNoaWxkcyAmJiBjaGlsZHMubGVuZ3RoICYmIGFkZENoaWxkRWxlbWVudHMoZWxlbWVudCwgY2hpbGRzKTtcclxuICByZXR1cm4gZWxlbWVudDtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBhZGRDaGlsZEVsZW1lbnRzID0gKGVsZW1lbnQsIGNoaWxkcykgPT4ge1xyXG4gIGxldCBwcm9wcyA9IG51bGw7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHMubGVuZ3RoOyBpKyspIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkc1tpXSkpIGFkZENoaWxkRWxlbWVudHMoZWxlbWVudCwgY2hpbGRzW2ldKTtcclxuICAgIGVsc2UgaWYgKGNoaWxkc1tpXSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSBjaGlsZHNbaV0oZWxlbWVudCk7XHJcbiAgICBlbHNlIHtcclxuICAgICAgaWYgKGNoaWxkc1tpXSkge1xyXG4gICAgICAgIHByb3BzID0gY2hpbGRzW2ldW1wiJHByb3BzXCJdO1xyXG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoXHJcbiAgICAgICAgICBjaGlsZHNbaV0gaW5zdGFuY2VvZiBOb2RlXHJcbiAgICAgICAgICAgID8gY2hpbGRzW2ldXHJcbiAgICAgICAgICAgIDogZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY2hpbGRzW2ldKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcHJvcHMgJiYgcHJvcHMuZGlkTW91bnQgJiYgcHJvcHMuZGlkTW91bnQoZWxlbWVudCwgY2hpbGRzW2ldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVUZXh0Tm9kZSA9IHBhcmVudCA9PiB7XHJcbiAgcmV0dXJuIHBhcmVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKSk7XHJcbn07XHJcbiIsImltcG9ydCB7IEZKc3hWYWx1ZSB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHsgRXZlbnRlZEFycmF5IH0gZnJvbSBcIi4vZXZlbnRlZC1hcnJheVwiO1xuaW1wb3J0IHsgY29tcHV0ZSB9IGZyb20gXCIuL2ZcIjtcblxuZXhwb3J0IGNvbnN0IGNvbmRpdGlvbmFsRWxlbWVudCA9IChwYXJlbnRFbGVtZW50LCBvbGRFbGVtZW50LCBuZXdFbGVtZW50KSA9PiB7XG4gIGlmIChuZXdFbGVtZW50IGluc3RhbmNlb2YgTm9kZSA9PT0gZmFsc2UpXG4gICAgbmV3RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG5ld0VsZW1lbnQgfHwgXCJcIik7XG4gIGlmIChvbGRFbGVtZW50KSBwYXJlbnRFbGVtZW50LnJlcGxhY2VDaGlsZChuZXdFbGVtZW50LCBvbGRFbGVtZW50KTtcbiAgZWxzZSBwYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKG5ld0VsZW1lbnQpO1xuICByZXR1cm4gbmV3RWxlbWVudDtcbn07XG5cbmV4cG9ydCBjb25zdCBpbnNlcnRUb0RvbSA9IChwYXJlbnRFbGVtZW50LCBpbmRleCwgaXRlbUVsZW1lbnQpID0+IHtcbiAgaWYgKGl0ZW1FbGVtZW50IGluc3RhbmNlb2YgRnVuY3Rpb24pIGl0ZW1FbGVtZW50KHBhcmVudEVsZW1lbnQpO1xuICBlbHNlIHtcbiAgICBpZiAoaXRlbUVsZW1lbnQgaW5zdGFuY2VvZiBOb2RlID09PSBmYWxzZSlcbiAgICAgIGl0ZW1FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoaXRlbUVsZW1lbnQpO1xuICAgIHBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGl0ZW1FbGVtZW50LCBwYXJlbnRFbGVtZW50LmNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGFycmF5TWFwID0gKFxuICBhcnI6IEZKc3hWYWx1ZTxhbnlbXT4sXG4gIHBhcmVudERvbTogSFRNTEVsZW1lbnQsXG4gIHJlbmRlclJldHVybjogKGl0ZW06IGFueSwgaWR4PzogbnVtYmVyLCBpc0luc2VydD86IGJvb2xlYW4pID0+IHZvaWRcbikgPT4ge1xuICBjb25zdCBvQXJyID1cbiAgICBhcnIuJHZhbCBpbnN0YW5jZW9mIEV2ZW50ZWRBcnJheSA/IGFyci4kdmFsIDogbmV3IEV2ZW50ZWRBcnJheShhcnIuJHZhbCk7XG5cbiAgb0Fyci5vbihcIml0ZW1hZGRlZFwiLCBmdW5jdGlvbihlKSB7XG4gICAgaW5zZXJ0VG9Eb20ocGFyZW50RG9tLCBlLmluZGV4LCByZW5kZXJSZXR1cm4oZS5pdGVtLCBlLmluZGV4KSk7XG4gIH0pO1xuXG4gIG9BcnIub24oXCJpdGVtc2V0XCIsIGZ1bmN0aW9uKGUpIHtcbiAgICBwYXJlbnREb20ucmVwbGFjZUNoaWxkKFxuICAgICAgcmVuZGVyUmV0dXJuKGUuaXRlbSwgZS5pbmRleCkgYXMgYW55LFxuICAgICAgcGFyZW50RG9tLmNoaWxkTm9kZXMuaXRlbShlLmluZGV4KVxuICAgICk7XG4gIH0pO1xuXG4gIG9BcnIub24oXCJpdGVtcmVtb3ZlZFwiLCBmdW5jdGlvbihlKSB7XG4gICAgcGFyZW50RG9tLnJlbW92ZUNoaWxkKHBhcmVudERvbS5jaGlsZE5vZGVzLml0ZW0oZS5pbmRleCkpO1xuICB9KTtcbiAgYXJyKG9BcnIpO1xuXG4gIGNvbnN0IHJlbmRlckFsbCA9ICgpID0+IHtcbiAgICBpZiAoYXJyLiR2YWwubGVuZ3RoID09PSAwKSBwYXJlbnREb20udGV4dENvbnRlbnQgPSBcIlwiO1xuICAgIGVsc2Uge1xuICAgICAgcGFyZW50RG9tLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICAgIGZvciAodmFyIGkgPSBwYXJlbnREb20uY2hpbGRFbGVtZW50Q291bnQ7IGkgPCBhcnIuJHZhbC5sZW5ndGg7IGkrKylcbiAgICAgICAgaW5zZXJ0VG9Eb20ocGFyZW50RG9tLCBpLCByZW5kZXJSZXR1cm4oYXJyLiR2YWxbaV0sIGkpKTtcbiAgICB9XG4gIH07XG4gIGNvbXB1dGUocmVuZGVyQWxsLCBhcnIpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=