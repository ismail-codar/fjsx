!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3);t.value=((e,t)=>{if(e&&void 0!=e.$val)throw"Fjsx: Higher ordered signals is not supported.";const n=e=>{Array.isArray(e)&&!n.$val.innerArray?n.$val.innerArray=e:n.$val=e;const t=n.computes;if(t.length)for(var r=0;r<t.length;r++)!t[r].freezed&&t[r](t[r].compute())};return n.$val=e,n.freezed=t,n.computes=[],n.toString=n.toJSON=(()=>n.$val.toString()),n}),t.array=(e=>{const n=t.value(new r.EventedArray(e));return n.on=n.$val.on,n.off=n.$val.off,n.toJSON=(()=>n.$val.innerArray),n}),t.on=((e,t,n)=>{e.$val.on(t,n)}),t.off=((e,t,n)=>{e.$val.off(t,n)}),t.compute=((e,...n)=>{var r=t.value();r.compute=e;for(var o=0;o<n.length;o++)n[o].computes.push(r);e()}),t.initCompute=((e,...n)=>{const r=t.value(e());return t.compute(()=>{r(e())},...n),r}),t.setCompute=((e,n,...r)=>(t.destroy(e),t.initCompute(e,n,...r))),t.destroy=(e=>{delete e.compute,delete e.computes})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=[],o={};t.startContext=((e,t)=>{o[e]||(o[e]=[]),o[e].push(t),r.push(e)}),t.getContextValue=((e,t)=>t&&t.$context[e]?t.$context[e]:o[e]?o[e][o[e].length-1]:void 0),t.injectContexts=(e=>{e.$context||Object.defineProperty(e,"$context",{configurable:!1,enumerable:!1,value:{}});let t=null;for(var n=0;n<r.length;n++)t=r[n],e.$context[t]=o[t][o[t].length-1]}),t.endContext=(e=>{o[e].pop(),r.pop()}),t.activateContext=(e=>{for(var n in e)t.startContext(n,e[n])}),t.deactivateContext=(e=>{for(var n in e)t.endContext(n)}),t.Context=(e=>null)},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(0)),r(n(5)),r(n(6)),r(n(1)),r(n(7)),r(n(11))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EventedArray=function(e){var t=this,n=[],r={itemadded:[],itemremoved:[],itemset:[]};function o(e){e in t||Object.defineProperty(t,e,{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(t){n[e]=t,i({type:"itemset",index:e,item:t})}})}function i(e){r[e.type].forEach(function(n){n.call(t,e)})}t.on=function(e,t){r[e].push(t)},t.off=function(e,t){for(var n=r[e],o=n.length;--o>=0;)n[o]===t&&n.splice(o,1)},t.push=function(){for(var e,t=0,r=arguments.length;t<r;t++)e=n.length,n.push(arguments[t]),o(e),i({type:"itemadded",index:e,item:arguments[t]});return n.length},t.pop=function(){if(n.length>-1){var e=n.length-1,r=n.pop();return delete t[e],i({type:"itemremoved",index:e,item:r}),r}},t.unshift=function(){for(var e=0,t=arguments.length;e<t;e++)n.splice(e,0,arguments[e]),o(n.length-1),i({type:"itemadded",index:e,item:arguments[e]});for(;e<n.length;e++)i({type:"itemset",index:e,item:n[e]});return n.length},t.shift=function(){if(n.length>-1){var e=n.shift();return delete t[n.length],i({type:"itemremoved",index:0,item:e}),e}},t.splice=function(e,r){var l,s=[];for(e=null==e?0:e<0?n.length+e:e,r=null==r?n.length-e:r>0?r:0;r--;)l=n.splice(e,1)[0],s.push(l),delete t[n.length],i({type:"itemremoved",index:e+s.length-1,item:l});for(var u=2,c=arguments.length;u<c;u++)n.splice(e,0,arguments[u]),o(n.length-1),i({type:"itemadded",index:e,item:arguments[u]}),e++;return s},Object.defineProperty(t,"length",{configurable:!1,enumerable:!1,get:function(){return n.length},set:function(e){var r=Number(e),o=n.length;if(!(r%1==0&&r>=0))throw new RangeError("Invalid array length");return r<o?t.splice(r):r>o&&t.push.apply(t,new Array(r-o)),n.length=r,e}}),Object.defineProperty(t,"innerArray",{configurable:!1,enumerable:!1,get:function(){return n},set:function(e){n=e}}),Object.getOwnPropertyNames(Array.prototype).forEach(function(e){e in t||Object.defineProperty(t,e,{configurable:!1,enumerable:!1,writable:!1,value:Array.prototype[e]})}),t.toJSON=(()=>n),e instanceof Array&&t.push.apply(t,e)}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3),o=n(0),i=n(1);t.conditionalElement=((e,t,n)=>{e.$props&&i.activateContext(e.$props.$context);let r=n();return e.$props&&i.deactivateContext(e.$props.$context),r instanceof Node==!1&&(r=document.createTextNode(r||"")),t?e.replaceChild(r,t):e.appendChild(r),r}),t.insertToDom=((e,t,n)=>{n instanceof Function?n(e):(n instanceof Node==!1&&(n=document.createTextNode(n)),e.insertBefore(n,e.childNodes[t]))}),t.arrayMap=((e,n,i)=>{const l=e.$val instanceof r.EventedArray?e.$val:new r.EventedArray(e.$val);l.on("itemadded",function(e){t.insertToDom(n,e.index,i(e.item,e.index))}),l.on("itemset",function(e){n.replaceChild(i(e.item,e.index),n.childNodes.item(e.index))}),l.on("itemremoved",function(e){n.removeChild(n.childNodes.item(e.index))}),e(l);o.compute(()=>{if(0===e.$val.length)n.textContent="";else{n.textContent="";for(var r=n.childElementCount;r<e.$val.length;r++)t.insertToDom(n,r,i(e.$val[r],r))}},e)}),t.arrayMapWithClone=((e,n,i,l)=>{const s=e.$val instanceof r.EventedArray?e.$val:new r.EventedArray(e.$val);let u=null;const c=(e,t,n)=>{l.forEach(r=>{const o=Object.assign([],r.path);for(;o.length;)e=e.childNodes[o.shift()];r.fn(e,t,n)})},a=e=>null==u?u=i(e):u.cloneNode(!0);s.on("itemadded",function(e){let r=a(0);c(r,e.item,e.index),t.insertToDom(n,e.index,r)}),s.on("itemset",function(e){let t=a(e.index);c(t,e.item,e.index),n.replaceChild(t,n.childNodes.item(e.index))}),s.on("itemremoved",function(e){n.removeChild(n.childNodes.item(e.index))}),e(s);o.compute(()=>{if(0===e.$val.length)n.textContent="";else{u=i(0),c(u,e.$val[0],0),t.insertToDom(n,0,u);for(var r=1;r<e.$val.length;r++){const o=u.cloneNode(!0);c(o,e.$val[r],r),t.insertToDom(n,r,o)}}},e)})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);var o=/^on[A-Z]/;t.Fragment=Symbol("fjsx.Fragment"),t.setElementAttributes=((e,n,r)=>{let i=null;for(var l in n)if(void 0!=(i=n[l]))if(i instanceof Function)o.test(l)?e[l=l.toLowerCase()]=i:i(e);else if(i instanceof Object)if(Array.isArray(i))t.addChildElements(e,i);else for(var s in i)"function"==typeof i[s]&&i[s](e);else r||-1!==l.indexOf("-")?e.setAttribute(l,i):e[l]=i}),t.createElement=((e,n,...o)=>{let i=null;return e instanceof Function?(null===n&&(n={}),o&&o.length&&(n.children=o),r.injectContexts(n),(i=e(n))&&(i.$props=n)):(e===t.Fragment?i=document.createDocumentFragment():(i=document.createElement(e),n&&t.setElementAttributes(i,n,!1)),i.$props=n,o&&o.length&&t.addChildElements(i,o)),i}),t.createSvgElement=((e,n,...r)=>{let o=document.createElementNS("http://www.w3.org/2000/svg",e);return n&&(n.className&&(n.class=n.className,delete n.className),t.setElementAttributes(o,n,!0)),o.$props=n,r&&r.length&&t.addChildElements(o,r),o}),t.addChildElements=((e,n)=>{let r=null;for(var o=0;o<n.length;o++)Array.isArray(n[o])?t.addChildElements(e,n[o]):n[o]instanceof Function?n[o](e):n[o]&&(r=n[o].$props,e.appendChild(n[o]instanceof Node?n[o]:document.createTextNode(n[o])),r&&r.didMount&&r.didMount(e,n[o]))}),t.createTextNode=(e=>e.appendChild(document.createTextNode(""))),t.cloneElement=((e,n)=>(e=e.cloneNode(!0),n&&t.setElementAttributes(e,n,!1),e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2),o=n(8);class i{constructor(e){this.isUnsubscribed=!1,this.handlers=null,this._unsubscribe=null,this.handlers=e,this.isUnsubscribed=!1}next(e){this.handlers.next&&!this.isUnsubscribed&&this.handlers.next(e)}error(e){this.isUnsubscribed||(this.handlers.error&&this.handlers.error(e),this.unsubscribe())}complete(){this.isUnsubscribed||(this.handlers.complete&&this.handlers.complete(),this.unsubscribe())}unsubscribe(){this.isUnsubscribed=!0,this._unsubscribe&&this._unsubscribe()}}t.toObservable=(e=>new class{constructor(e){this._subscribe=null,this._subscribe=e}subscribe(e){const t=new i(e);return t._unsubscribe=this._subscribe(t),{unsubscribe(){t.unsubscribe()}}}[o.default](){return this}}(t=>{var n=r.value(()=>{t.next(e.$val)});e.computes.push(n)}))},function(e,t,n){"use strict";n.r(t),function(e,r){var o,i=n(4);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var l=Object(i.a)(o);t.default=l}.call(this,n(9),n(10)(e))},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.setDefaults=((e,t)=>{for(var n in t)void 0===e[n]&&(e[n]=t[n])}),t.mapProperty=((e,t,n)=>{const o=Object.getOwnPropertyDescriptor(e,t);o.configurable?Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:()=>n.$val,set:n}):o.set.computes.push(r.value(()=>{n(e[t])}))})}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,